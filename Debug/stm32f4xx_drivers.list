
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001f7c  08001f7c  00002f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fdc  08001fdc  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001fdc  08001fdc  00002fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fe4  08001fe4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe4  08001fe4  00002fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fe8  08001fe8  00002fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001fec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000384  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e0  200003e0  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ea3  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007a5  00000000  00000000  00004f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000280  00000000  00000000  000056d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ce  00000000  00000000  00005950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ec  00000000  00000000  00005b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002906  00000000  00000000  0000910a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c0f1  00000000  00000000  0000ba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00017b01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001138  00000000  00000000  00017b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00018c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f64 	.word	0x08001f64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001f64 	.word	0x08001f64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 * PD6 --> Info available
 */

void SPI2_GPIOInits(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000276:	4b14      	ldr	r3, [pc, #80]	@ (80002c8 <SPI2_GPIOInits+0x58>)
 8000278:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027a:	2302      	movs	r3, #2
 800027c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800027e:	2305      	movs	r3, #5
 8000280:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000286:	2300      	movs	r3, #0
 8000288:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VHIGH;
 800028a:	2303      	movs	r3, #3
 800028c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800028e:	230d      	movs	r3, #13
 8000290:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fa05 	bl	80006a4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800029a:	230f      	movs	r3, #15
 800029c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9ff 	bl	80006a4 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002a6:	230e      	movs	r3, #14
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f9f9 	bl	80006a4 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002b2:	230c      	movs	r3, #12
 80002b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f9f3 	bl	80006a4 <GPIO_Init>

}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020400 	.word	0x40020400

080002cc <SPI2_Inits>:

void SPI2_Inits(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <SPI2_Inits+0x40>)
 80002d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000310 <SPI2_Inits+0x44>)
 80002d4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002d6:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <SPI2_Inits+0x40>)
 80002d8:	2201      	movs	r2, #1
 80002da:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <SPI2_Inits+0x40>)
 80002de:	2201      	movs	r2, #1
 80002e0:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 80002e2:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <SPI2_Inits+0x40>)
 80002e4:	2204      	movs	r2, #4
 80002e6:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <SPI2_Inits+0x40>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ee:	4b07      	ldr	r3, [pc, #28]	@ (800030c <SPI2_Inits+0x40>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <SPI2_Inits+0x40>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 80002fa:	4b04      	ldr	r3, [pc, #16]	@ (800030c <SPI2_Inits+0x40>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <SPI2_Inits+0x40>)
 8000302:	f000 fc4d 	bl	8000ba0 <SPI_Init>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000078 	.word	0x20000078
 8000310:	40003800 	.word	0x40003800

08000314 <Slave_GPIO_InterruptPinInit>:

/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin, 0, sizeof(spiIntPin));
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	220c      	movs	r2, #12
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f001 f8a3 	bl	800146c <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <Slave_GPIO_InterruptPinInit+0x48>)
 8000328:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800032a:	2306      	movs	r3, #6
 800032c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800032e:	2304      	movs	r3, #4
 8000330:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000336:	2301      	movs	r3, #1
 8000338:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f9b1 	bl	80006a4 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 8000342:	210f      	movs	r1, #15
 8000344:	2017      	movs	r0, #23
 8000346:	f000 fb59 	bl	80009fc <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 800034a:	2101      	movs	r1, #1
 800034c:	2017      	movs	r0, #23
 800034e:	f000 fb13 	bl	8000978 <GPIO_IRQInterruptConfig>

}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40020c00 	.word	0x40020c00

08000360 <main>:

int main(void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000366:	23ff      	movs	r3, #255	@ 0xff
 8000368:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800036a:	f7ff ffd3 	bl	8000314 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800036e:	f7ff ff7f 	bl	8000270 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000372:	f7ff ffab 	bl	80002cc <SPI2_Inits>
	 * making SSOE 1 does NSS output enable.
	 * The NSS pin is automatically managed by the hardware.
	 * i.e when SPE=1 , NSS will be pulled to low
	 * and NSS pin will be high when SPE=0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	4825      	ldr	r0, [pc, #148]	@ (8000410 <main+0xb0>)
 800037a:	f000 fca3 	bl	8000cc4 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	2024      	movs	r0, #36	@ 0x24
 8000382:	f000 fcbb 	bl	8000cfc <SPI_IRQInterruptConfig>

	printf("Started \n");
 8000386:	4823      	ldr	r0, [pc, #140]	@ (8000414 <main+0xb4>)
 8000388:	f000 ff90 	bl	80012ac <puts>

	while (1) {

		rcvStop = 0;
 800038c:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <main+0xb8>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]

		while (!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 8000392:	bf00      	nop
 8000394:	4b21      	ldr	r3, [pc, #132]	@ (800041c <main+0xbc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0fa      	beq.n	8000394 <main+0x34>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, DISABLE);
 800039e:	2100      	movs	r1, #0
 80003a0:	2017      	movs	r0, #23
 80003a2:	f000 fae9 	bl	8000978 <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 80003a6:	2101      	movs	r1, #1
 80003a8:	4819      	ldr	r0, [pc, #100]	@ (8000410 <main+0xb0>)
 80003aa:	f000 fc70 	bl	8000c8e <SPI_PeripheralControl>

		while (!rcvStop) {
 80003ae:	e012      	b.n	80003d6 <main+0x76>
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while (SPI_SendDataIT(&SPI2handle, &dummy, 1) == SPI_STATE_BUSY_TX);
 80003b0:	bf00      	nop
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	2201      	movs	r2, #1
 80003b6:	4619      	mov	r1, r3
 80003b8:	4819      	ldr	r0, [pc, #100]	@ (8000420 <main+0xc0>)
 80003ba:	f000 fce1 	bl	8000d80 <SPI_SendDataIT>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d0f6      	beq.n	80003b2 <main+0x52>
			while (SPI_ReceiveDataIT(&SPI2handle, &ReadByte, 1)	== SPI_STATE_BUSY_RX);
 80003c4:	bf00      	nop
 80003c6:	2201      	movs	r2, #1
 80003c8:	4916      	ldr	r1, [pc, #88]	@ (8000424 <main+0xc4>)
 80003ca:	4815      	ldr	r0, [pc, #84]	@ (8000420 <main+0xc0>)
 80003cc:	f000 fcfb 	bl	8000dc6 <SPI_ReceiveDataIT>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d0f7      	beq.n	80003c6 <main+0x66>
		while (!rcvStop) {
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <main+0xb8>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0e7      	beq.n	80003b0 <main+0x50>
		}

		// confirm SPI is not busy
		while (SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG))
 80003e0:	bf00      	nop
 80003e2:	2180      	movs	r1, #128	@ 0x80
 80003e4:	480a      	ldr	r0, [pc, #40]	@ (8000410 <main+0xb0>)
 80003e6:	f000 fc3f 	bl	8000c68 <SPI_GetFlagStatus>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1f8      	bne.n	80003e2 <main+0x82>
			;

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 80003f0:	2100      	movs	r1, #0
 80003f2:	4807      	ldr	r0, [pc, #28]	@ (8000410 <main+0xb0>)
 80003f4:	f000 fc4b 	bl	8000c8e <SPI_PeripheralControl>

		printf("Rcvd data = %s\n", RcvBuff);
 80003f8:	490b      	ldr	r1, [pc, #44]	@ (8000428 <main+0xc8>)
 80003fa:	480c      	ldr	r0, [pc, #48]	@ (800042c <main+0xcc>)
 80003fc:	f000 feee 	bl	80011dc <iprintf>

		dataAvailable = 0;
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <main+0xbc>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 8000406:	2101      	movs	r1, #1
 8000408:	2017      	movs	r0, #23
 800040a:	f000 fab5 	bl	8000978 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 800040e:	e7bd      	b.n	800038c <main+0x2c>
 8000410:	40003800 	.word	0x40003800
 8000414:	08001f7c 	.word	0x08001f7c
 8000418:	2000028d 	.word	0x2000028d
 800041c:	2000028e 	.word	0x2000028e
 8000420:	20000078 	.word	0x20000078
 8000424:	2000028c 	.word	0x2000028c
 8000428:	20000098 	.word	0x20000098
 800042c:	08001f88 	.word	0x08001f88

08000430 <SPI2_IRQHandler>:
	return 0;

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 8000434:	4802      	ldr	r0, [pc, #8]	@ (8000440 <SPI2_IRQHandler+0x10>)
 8000436:	f000 fce9 	bl	8000e0c <SPI_IRQHandling>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000078 	.word	0x20000078

08000444 <EXTI9_5_IRQHandler>:
	}

}

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	printf("Data available\n");
 8000448:	4805      	ldr	r0, [pc, #20]	@ (8000460 <EXTI9_5_IRQHandler+0x1c>)
 800044a:	f000 ff2f 	bl	80012ac <puts>
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 800044e:	2006      	movs	r0, #6
 8000450:	f000 fb16 	bl	8000a80 <GPIO_IRQHandling>
	dataAvailable = 1;
 8000454:	4b03      	ldr	r3, [pc, #12]	@ (8000464 <EXTI9_5_IRQHandler+0x20>)
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	08001f98 	.word	0x08001f98
 8000464:	2000028e 	.word	0x2000028e

08000468 <ITM_SendChar>:
#define DEMCR    *((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */

#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
    //Enable TRCENA
    DEMCR |= ( 1 << 24);
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <ITM_SendChar+0x44>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <ITM_SendChar+0x44>)
 8000478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800047c:	6013      	str	r3, [r2, #0]
    //enable stimulus port 0
    ITM_TRACE_EN |= ( 1 << 0);
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <ITM_SendChar+0x48>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a0b      	ldr	r2, [pc, #44]	@ (80004b0 <ITM_SendChar+0x48>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6013      	str	r3, [r2, #0]
    // read FIFO status in bit [0]:
    while(!(ITM_STIMULUS_PORT0 & 1));
 800048a:	bf00      	nop
 800048c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f8      	beq.n	800048c <ITM_SendChar+0x24>
    //Write to ITM stimulus port0
    ITM_STIMULUS_PORT0 = ch;}
 800049a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	e000edfc 	.word	0xe000edfc
 80004b0:	e0000e00 	.word	0xe0000e00

080004b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e00a      	b.n	80004dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004c6:	f3af 8000 	nop.w
 80004ca:	4601      	mov	r1, r0
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	60ba      	str	r2, [r7, #8]
 80004d2:	b2ca      	uxtb	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697a      	ldr	r2, [r7, #20]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbf0      	blt.n	80004c6 <_read+0x12>
  }

  return len;
 80004e4:	687b      	ldr	r3, [r7, #4]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3718      	adds	r7, #24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b086      	sub	sp, #24
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	e009      	b.n	8000514 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	60ba      	str	r2, [r7, #8]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ffad 	bl	8000468 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf1      	blt.n	8000500 <_write+0x12>
  }
  return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_close>:

int _close(int file)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800054c:	605a      	str	r2, [r3, #4]
  return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_isatty>:

int _isatty(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	60f8      	str	r0, [r7, #12]
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
	...

08000588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000590:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <_sbrk+0x5c>)
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <_sbrk+0x60>)
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800059c:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a4:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <_sbrk+0x64>)
 80005a6:	4a12      	ldr	r2, [pc, #72]	@ (80005f0 <_sbrk+0x68>)
 80005a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d207      	bcs.n	80005c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b8:	f000 ffa6 	bl	8001508 <__errno>
 80005bc:	4603      	mov	r3, r0
 80005be:	220c      	movs	r2, #12
 80005c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	e009      	b.n	80005dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ce:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	4a05      	ldr	r2, [pc, #20]	@ (80005ec <_sbrk+0x64>)
 80005d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005da:	68fb      	ldr	r3, [r7, #12]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20020000 	.word	0x20020000
 80005e8:	00000400 	.word	0x00000400
 80005ec:	20000290 	.word	0x20000290
 80005f0:	200003e0 	.word	0x200003e0

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	@ (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f000 ff77 	bl	8001514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff fe9b 	bl	8000360 <main>

0800062a <LoopForever>:

LoopForever:
  b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000638:	08001fec 	.word	0x08001fec
  ldr r2, =_sbss
 800063c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000640:	200003e0 	.word	0x200003e0

08000644 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC_IRQHandler>
	...

08000648 <GPIO_PeriClockControl>:
 *
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
	/*
	 * For when GPIO registers are spaced evenly (faster)
	 */
	uint8_t port = ((uint32_t) pGPIOx - GPIOA_BASEADDR) / 0x400;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 800065a:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800065e:	0a9b      	lsrs	r3, r3, #10
 8000660:	73fb      	strb	r3, [r7, #15]
	if (EnOrDi == ENABLE) {
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d10a      	bne.n	800067e <GPIO_PeriClockControl+0x36>
		RCC->AHB1ENR |= (1 << port);
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <GPIO_PeriClockControl+0x58>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066c:	7bfa      	ldrb	r2, [r7, #15]
 800066e:	2101      	movs	r1, #1
 8000670:	fa01 f202 	lsl.w	r2, r1, r2
 8000674:	4611      	mov	r1, r2
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <GPIO_PeriClockControl+0x58>)
 8000678:	430b      	orrs	r3, r1
 800067a:	6313      	str	r3, [r2, #48]	@ 0x30
	 GPIOI_PCLK_DI();
	 }
	 }
	 */

}
 800067c:	e00a      	b.n	8000694 <GPIO_PeriClockControl+0x4c>
		RCC->AHB1ENR &= ~(1 << port);
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <GPIO_PeriClockControl+0x58>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	2101      	movs	r1, #1
 8000686:	fa01 f202 	lsl.w	r2, r1, r2
 800068a:	43d2      	mvns	r2, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <GPIO_PeriClockControl+0x58>)
 8000690:	400b      	ands	r3, r1
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <GPIO_Init>:
 *
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint32_t temp32 = 0;	// temp32 register
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

	// Enable the pheripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffc6 	bl	8000648 <GPIO_PeriClockControl>

	// 1. Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {	// Non interrupt mode
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	795b      	ldrb	r3, [r3, #5]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d820      	bhi.n	8000706 <GPIO_Init+0x62>
		temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
		temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	2103      	movs	r1, #3
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp32; //setting
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	e099      	b.n	800083a <GPIO_Init+0x196>

	} else {	// Interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	795b      	ldrb	r3, [r3, #5]
 800070a:	2b04      	cmp	r3, #4
 800070c:	d117      	bne.n	800073e <GPIO_Init+0x9a>
			// 1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800070e:	4b97      	ldr	r3, [pc, #604]	@ (800096c <GPIO_Init+0x2c8>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	7912      	ldrb	r2, [r2, #4]
 8000716:	4611      	mov	r1, r2
 8000718:	2201      	movs	r2, #1
 800071a:	408a      	lsls	r2, r1
 800071c:	4611      	mov	r1, r2
 800071e:	4a93      	ldr	r2, [pc, #588]	@ (800096c <GPIO_Init+0x2c8>)
 8000720:	430b      	orrs	r3, r1
 8000722:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear the corresponding RTSR bit
 8000724:	4b91      	ldr	r3, [pc, #580]	@ (800096c <GPIO_Init+0x2c8>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	7912      	ldrb	r2, [r2, #4]
 800072c:	4611      	mov	r1, r2
 800072e:	2201      	movs	r2, #1
 8000730:	408a      	lsls	r2, r1
 8000732:	43d2      	mvns	r2, r2
 8000734:	4611      	mov	r1, r2
 8000736:	4a8d      	ldr	r2, [pc, #564]	@ (800096c <GPIO_Init+0x2c8>)
 8000738:	400b      	ands	r3, r1
 800073a:	6093      	str	r3, [r2, #8]
 800073c:	e035      	b.n	80007aa <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	795b      	ldrb	r3, [r3, #5]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d117      	bne.n	8000776 <GPIO_Init+0xd2>
			// 1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000746:	4b89      	ldr	r3, [pc, #548]	@ (800096c <GPIO_Init+0x2c8>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	7912      	ldrb	r2, [r2, #4]
 800074e:	4611      	mov	r1, r2
 8000750:	2201      	movs	r2, #1
 8000752:	408a      	lsls	r2, r1
 8000754:	4611      	mov	r1, r2
 8000756:	4a85      	ldr	r2, [pc, #532]	@ (800096c <GPIO_Init+0x2c8>)
 8000758:	430b      	orrs	r3, r1
 800075a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear the corresponding FTSR bit
 800075c:	4b83      	ldr	r3, [pc, #524]	@ (800096c <GPIO_Init+0x2c8>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7912      	ldrb	r2, [r2, #4]
 8000764:	4611      	mov	r1, r2
 8000766:	2201      	movs	r2, #1
 8000768:	408a      	lsls	r2, r1
 800076a:	43d2      	mvns	r2, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4a7f      	ldr	r2, [pc, #508]	@ (800096c <GPIO_Init+0x2c8>)
 8000770:	400b      	ands	r3, r1
 8000772:	60d3      	str	r3, [r2, #12]
 8000774:	e019      	b.n	80007aa <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	2b06      	cmp	r3, #6
 800077c:	d115      	bne.n	80007aa <GPIO_Init+0x106>
			// 1. Configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800077e:	4b7b      	ldr	r3, [pc, #492]	@ (800096c <GPIO_Init+0x2c8>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7912      	ldrb	r2, [r2, #4]
 8000786:	4611      	mov	r1, r2
 8000788:	2201      	movs	r2, #1
 800078a:	408a      	lsls	r2, r1
 800078c:	4611      	mov	r1, r2
 800078e:	4a77      	ldr	r2, [pc, #476]	@ (800096c <GPIO_Init+0x2c8>)
 8000790:	430b      	orrs	r3, r1
 8000792:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000794:	4b75      	ldr	r3, [pc, #468]	@ (800096c <GPIO_Init+0x2c8>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	7912      	ldrb	r2, [r2, #4]
 800079c:	4611      	mov	r1, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	408a      	lsls	r2, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a71      	ldr	r2, [pc, #452]	@ (800096c <GPIO_Init+0x2c8>)
 80007a6:	430b      	orrs	r3, r1
 80007a8:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		/*get port if GPIO registers are spaced evenly*/
		uint8_t port = ((uint32_t) pGPIOHandle->pGPIOx - GPIOA_BASEADDR)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 80007b2:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
				/ 0x400;
 80007b6:	0a9b      	lsrs	r3, r3, #10
		uint8_t port = ((uint32_t) pGPIOHandle->pGPIOx - GPIOA_BASEADDR)
 80007b8:	74fb      	strb	r3, [r7, #19]

		/*get port if GPIO registers are not spaced evenly*/
		//uint8_t port = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
		uint8_t extiRegister = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	74bb      	strb	r3, [r7, #18]
		uint8_t pinOffset = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	747b      	strb	r3, [r7, #17]
				* 4;

		temp32 = (port & 0xF) << pinOffset;	//Note: the port bits are limited in length for security
 80007d0:	7cfb      	ldrb	r3, [r7, #19]
 80007d2:	f003 020f 	and.w	r2, r3, #15
 80007d6:	7c7b      	ldrb	r3, [r7, #17]
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	617b      	str	r3, [r7, #20]
		SYSCFG_PCLK_EN();	// Enable sysconfig
 80007de:	4b64      	ldr	r3, [pc, #400]	@ (8000970 <GPIO_Init+0x2cc>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a63      	ldr	r2, [pc, #396]	@ (8000970 <GPIO_Init+0x2cc>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[extiRegister] &= ~(0xF << pinOffset);	// clearing
 80007ea:	4a62      	ldr	r2, [pc, #392]	@ (8000974 <GPIO_Init+0x2d0>)
 80007ec:	7cbb      	ldrb	r3, [r7, #18]
 80007ee:	3302      	adds	r3, #2
 80007f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f4:	7c7b      	ldrb	r3, [r7, #17]
 80007f6:	210f      	movs	r1, #15
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	495c      	ldr	r1, [pc, #368]	@ (8000974 <GPIO_Init+0x2d0>)
 8000802:	7cbb      	ldrb	r3, [r7, #18]
 8000804:	4002      	ands	r2, r0
 8000806:	3302      	adds	r3, #2
 8000808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[extiRegister] |= temp32;	// Setting
 800080c:	4a59      	ldr	r2, [pc, #356]	@ (8000974 <GPIO_Init+0x2d0>)
 800080e:	7cbb      	ldrb	r3, [r7, #18]
 8000810:	3302      	adds	r3, #2
 8000812:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000816:	4857      	ldr	r0, [pc, #348]	@ (8000974 <GPIO_Init+0x2d0>)
 8000818:	7cbb      	ldrb	r3, [r7, #18]
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	430a      	orrs	r2, r1
 800081e:	3302      	adds	r3, #2
 8000820:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000824:	4b51      	ldr	r3, [pc, #324]	@ (800096c <GPIO_Init+0x2c8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	7912      	ldrb	r2, [r2, #4]
 800082c:	4611      	mov	r1, r2
 800082e:	2201      	movs	r2, #1
 8000830:	408a      	lsls	r2, r1
 8000832:	4611      	mov	r1, r2
 8000834:	4a4d      	ldr	r2, [pc, #308]	@ (800096c <GPIO_Init+0x2c8>)
 8000836:	430b      	orrs	r3, r1
 8000838:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure the speed
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	799b      	ldrb	r3, [r3, #6]
 800083e:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800084a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689a      	ldr	r2, [r3, #8]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2103      	movs	r1, #3
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 800085e:	43db      	mvns	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	400a      	ands	r2, r1
 8000868:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp32; //setting
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6899      	ldr	r1, [r3, #8]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	430a      	orrs	r2, r1
 8000878:	609a      	str	r2, [r3, #8]

	// 3. Configure the pullup/pulldown settings
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	79db      	ldrb	r3, [r3, #7]
 800087e:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800088a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	2103      	movs	r1, #3
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 800089e:	43db      	mvns	r3, r3
 80008a0:	4619      	mov	r1, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	400a      	ands	r2, r1
 80008a8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp32; //setting
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68d9      	ldr	r1, [r3, #12]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	430a      	orrs	r2, r1
 80008b8:	60da      	str	r2, [r3, #12]

	// 4. Configure the output type
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7a1b      	ldrb	r3, [r3, #8]
 80008be:	461a      	mov	r2, r3
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80008c8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685a      	ldr	r2, [r3, #4]
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	4619      	mov	r1, r3
 80008d6:	2301      	movs	r3, #1
 80008d8:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80008da:	43db      	mvns	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	400a      	ands	r2, r1
 80008e4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp32; //setting
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6859      	ldr	r1, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	605a      	str	r2, [r3, #4]

	// 5. Configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	795b      	ldrb	r3, [r3, #5]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d131      	bne.n	8000962 <GPIO_Init+0x2be>
		uint8_t temp1, temp2;

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8;	//high or low
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	08db      	lsrs	r3, r3, #3
 8000904:	743b      	strb	r3, [r7, #16]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8;	//register pin offset
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0b1111 << (4 * temp2));// clearing
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	7c3a      	ldrb	r2, [r7, #16]
 8000916:	3208      	adds	r2, #8
 8000918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	220f      	movs	r2, #15
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	4618      	mov	r0, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7c3a      	ldrb	r2, [r7, #16]
 8000930:	4001      	ands	r1, r0
 8000932:	3208      	adds	r2, #8
 8000934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFRL[temp1] |=
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	7c3a      	ldrb	r2, [r7, #16]
 800093e:	3208      	adds	r2, #8
 8000940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode) << (4 * temp2));//setting
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7a5b      	ldrb	r3, [r3, #9]
 8000948:	461a      	mov	r2, r3
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFRL[temp1] |=
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	7c3a      	ldrb	r2, [r7, #16]
 800095a:	4301      	orrs	r1, r0
 800095c:	3208      	adds	r2, #8
 800095e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40013c00 	.word	0x40013c00
 8000970:	40023800 	.word	0x40023800
 8000974:	40013800 	.word	0x40013800

08000978 <GPIO_IRQInterruptConfig>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
	/*
	 * Smart option knowing all NVIC registers are evenly spaced and next to each other
	 */
	if (IRQNumber > 81)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b51      	cmp	r3, #81	@ 0x51
 800098c:	d82f      	bhi.n	80009ee <GPIO_IRQInterruptConfig+0x76>
		return; // Protection (max 81 IRQ numbers)

	uint8_t NVIC_reg_idx = IRQNumber / 32;
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	095b      	lsrs	r3, r3, #5
 8000992:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_pos = IRQNumber % 32;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 031f 	and.w	r3, r3, #31
 800099a:	73bb      	strb	r3, [r7, #14]

	if (EnOrDi == ENABLE) {
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d114      	bne.n	80009cc <GPIO_IRQInterruptConfig+0x54>
		*(NVIC_ISER0 + NVIC_reg_idx) |= (1 << bit_pos);
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80009aa:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	7bbb      	ldrb	r3, [r7, #14]
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80009c2:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80009c6:	430a      	orrs	r2, r1
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e011      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x78>
	} else {
		*(NVIC_ICER0 + NVIC_reg_idx) |= (1 << bit_pos);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	009a      	lsls	r2, r3, #2
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <GPIO_IRQInterruptConfig+0x80>)
 80009d2:	4413      	add	r3, r2
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	0099      	lsls	r1, r3, #2
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <GPIO_IRQInterruptConfig+0x80>)
 80009e6:	440b      	add	r3, r1
 80009e8:	4302      	orrs	r2, r0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e000      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x78>
		return; // Protection (max 81 IRQ numbers)
 80009ee:	bf00      	nop
	 break;
	 }
	 } else {
	 //Repeat for ICER
	 }*/
}
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	e000e180 	.word	0xe000e180

080009fc <GPIO_IRQPriorityConfig>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority) {
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber / 4;	//Find IPR register
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;	//Find IPR register section
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	73bb      	strb	r3, [r7, #14]

	/*
	 * Register priority value fields are eight bits wide, and non-implemented low-order bits read as zero and ignore writes.
	 */
	uint8_t shift_amount = iprx_section * 8 + (8 - NO_PR_BITS_IMPLEMENTED);
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	3304      	adds	r3, #4
 8000a22:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) &= ~(0xF << shift_amount);//Clear XXX: Maybe have to change if @NO_PR_BITS_IMPLEMENTED changes
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a2c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	7b7b      	ldrb	r3, [r7, #13]
 8000a34:	210f      	movs	r1, #15
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a46:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	601a      	str	r2, [r3, #0]
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQNumber << shift_amount);	//Set
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a56:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	79f9      	ldrb	r1, [r7, #7]
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a6e:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000a72:	430a      	orrs	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <GPIO_IRQHandling>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void GPIO_IRQHandling(uint8_t PinNumber) {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	//Clear the exti pr register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber)) {
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <GPIO_IRQHandling+0x3c>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	79fa      	ldrb	r2, [r7, #7]
 8000a90:	2101      	movs	r1, #1
 8000a92:	fa01 f202 	lsl.w	r2, r1, r2
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d009      	beq.n	8000ab0 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber);
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <GPIO_IRQHandling+0x3c>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <GPIO_IRQHandling+0x3c>)
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6153      	str	r3, [r2, #20]
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40013c00 	.word	0x40013c00

08000ac0 <SPI_PeriClockControl>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d12b      	bne.n	8000b2a <SPI_PeriClockControl+0x6a>
		if (pSPIx == SPI1) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b8c <SPI_PeriClockControl+0xcc>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000ada:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000ae0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
			SPI3_PCLK_DI();
		} else if (pSPIx == SPI4) {
			SPI4_PCLK_DI();
		}
	}
}
 8000ae6:	e04b      	b.n	8000b80 <SPI_PeriClockControl+0xc0>
		} else if (pSPIx == SPI2) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a2a      	ldr	r2, [pc, #168]	@ (8000b94 <SPI_PeriClockControl+0xd4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d106      	bne.n	8000afe <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	4a26      	ldr	r2, [pc, #152]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000afc:	e040      	b.n	8000b80 <SPI_PeriClockControl+0xc0>
		} else if (pSPIx == SPI3) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a25      	ldr	r2, [pc, #148]	@ (8000b98 <SPI_PeriClockControl+0xd8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000b06:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a21      	ldr	r2, [pc, #132]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b12:	e035      	b.n	8000b80 <SPI_PeriClockControl+0xc0>
		} else if (pSPIx == SPI4) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a21      	ldr	r2, [pc, #132]	@ (8000b9c <SPI_PeriClockControl+0xdc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d131      	bne.n	8000b80 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b20:	4a1b      	ldr	r2, [pc, #108]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b26:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b28:	e02a      	b.n	8000b80 <SPI_PeriClockControl+0xc0>
		if (pSPIx == SPI1) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <SPI_PeriClockControl+0xcc>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d106      	bne.n	8000b40 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a16      	ldr	r2, [pc, #88]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b3e:	e01f      	b.n	8000b80 <SPI_PeriClockControl+0xc0>
		} else if (pSPIx == SPI2) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <SPI_PeriClockControl+0xd4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d106      	bne.n	8000b56 <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b54:	e014      	b.n	8000b80 <SPI_PeriClockControl+0xc0>
		} else if (pSPIx == SPI3) {
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <SPI_PeriClockControl+0xd8>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d106      	bne.n	8000b6c <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b6a:	e009      	b.n	8000b80 <SPI_PeriClockControl+0xc0>
		} else if (pSPIx == SPI4) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <SPI_PeriClockControl+0xdc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d105      	bne.n	8000b80 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b78:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SPI_PeriClockControl+0xd0>)
 8000b7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000b7e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40003800 	.word	0x40003800
 8000b98:	40003c00 	.word	0x40003c00
 8000b9c:	40013400 	.word	0x40013400

08000ba0 <SPI_Init>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff86 	bl	8000ac0 <SPI_PeriClockControl>

	/* 1. Configure the SPI_CR1 register */
	uint32_t tempReg = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]

	// 1.1. Configure the device mode
	tempReg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]

	// 1.2. Configure the bus configuration
	switch (pSPIHandle->SPIConfig.SPI_BusConfig) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	795b      	ldrb	r3, [r3, #5]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d010      	beq.n	8000bee <SPI_Init+0x4e>
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	dc17      	bgt.n	8000c00 <SPI_Init+0x60>
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d002      	beq.n	8000bda <SPI_Init+0x3a>
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d005      	beq.n	8000be4 <SPI_Init+0x44>
 8000bd8:	e012      	b.n	8000c00 <SPI_Init+0x60>
	case SPI_BUS_CONFIG_FD:
		//BIDIMODE cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000be0:	60fb      	str	r3, [r7, #12]
		break;
 8000be2:	e00d      	b.n	8000c00 <SPI_Init+0x60>
	case SPI_BUS_CONFIG_HD:
		//BIDIMODE set
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bea:	60fb      	str	r3, [r7, #12]
		break;
 8000bec:	e008      	b.n	8000c00 <SPI_Init+0x60>
	case SPI_BUS_CONFIG_SIMPLEX_RXONLY:
		//BIDIMODE cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000bf4:	60fb      	str	r3, [r7, #12]
		//RXONLY set
		tempReg |= (1 << SPI_CR1_RXONLY);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfc:	60fb      	str	r3, [r7, #12]
		break;
 8000bfe:	bf00      	nop
	}

	// 1.3. Configure the baud rate
	tempReg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	799b      	ldrb	r3, [r3, #6]
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]

	// 1.4. Configure the dataframe format
	tempReg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	79db      	ldrb	r3, [r3, #7]
 8000c10:	02db      	lsls	r3, r3, #11
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	// 1.5. Configure clock polarity
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7a1b      	ldrb	r3, [r3, #8]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

	// 1.6. Configure clock phase
	tempReg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7a5b      	ldrb	r3, [r3, #9]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]

	// 1.7. Configure software slave management
	tempReg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7a9b      	ldrb	r3, [r3, #10]
 8000c34:	025b      	lsls	r3, r3, #9
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 &= ~0x7FFF;	//Clear
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000c4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000c4e:	6013      	str	r3, [r2, #0]
	pSPIHandle->pSPIx->CR1 |= tempReg;	//Set
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6819      	ldr	r1, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]


}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <SPI_GetFlagStatus>:
 *
 * @return 			-
 *
 * @Note			- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <SPI_GetFlagStatus+0x1c>
	} else{
		return FLAG_RESET;
 8000c82:	2300      	movs	r3, #0
	}
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <SPI_PeripheralControl>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d106      	bne.n	8000cae <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]
	} else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000cac:	e005      	b.n	8000cba <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <SPI_SSOEConfig>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d106      	bne.n	8000ce4 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f043 0204 	orr.w	r2, r3, #4
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	605a      	str	r2, [r3, #4]
	} else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000ce2:	e005      	b.n	8000cf0 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f023 0204 	bic.w	r2, r3, #4
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	605a      	str	r2, [r3, #4]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
	...

08000cfc <SPI_IRQInterruptConfig>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
	/*
	 * Smart option knowing all NVIC registers are evenly spaced and next to each other
	 */
	if (IRQNumber > 81)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b51      	cmp	r3, #81	@ 0x51
 8000d10:	d82f      	bhi.n	8000d72 <SPI_IRQInterruptConfig+0x76>
		return; // Protection (max 81 IRQ numbers)

	uint8_t NVIC_reg_idx = IRQNumber / 32;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	095b      	lsrs	r3, r3, #5
 8000d16:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_pos = IRQNumber % 32;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	73bb      	strb	r3, [r7, #14]

	if (EnOrDi == ENABLE) {
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d114      	bne.n	8000d50 <SPI_IRQInterruptConfig+0x54>
		*(NVIC_ISER0 + NVIC_reg_idx) |= (1 << bit_pos);
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000d2e:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000d46:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e011      	b.n	8000d74 <SPI_IRQInterruptConfig+0x78>
	} else {
		*(NVIC_ICER0 + NVIC_reg_idx) |= (1 << bit_pos);
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	009a      	lsls	r2, r3, #2
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <SPI_IRQInterruptConfig+0x80>)
 8000d56:	4413      	add	r3, r2
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	0099      	lsls	r1, r3, #2
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <SPI_IRQInterruptConfig+0x80>)
 8000d6a:	440b      	add	r3, r1
 8000d6c:	4302      	orrs	r2, r0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e000      	b.n	8000d74 <SPI_IRQInterruptConfig+0x78>
		return; // Protection (max 81 IRQ numbers)
 8000d72:	bf00      	nop
	 break;
	 }
	 } else {
	 //Repeat for ICER
	 }*/
}
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e180 	.word	0xe000e180

08000d80 <SPI_SendDataIT>:
 *
 * @return 			-
 *
 * @Note			- none
 */
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t len){
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	7f1b      	ldrb	r3, [r3, #28]
 8000d90:	75fb      	strb	r3, [r7, #23]
	if (state != SPI_STATE_BUSY_TX) {
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d010      	beq.n	8000dba <SPI_SendDataIT+0x3a>
		//1. Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = len;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	615a      	str	r2, [r3, #20]

		//2. Mark the SPI state as busy in transmission so that no other
		//	 code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_STATE_BUSY_TX;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2202      	movs	r2, #2
 8000da8:	771a      	strb	r2, [r3, #28]
		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000db8:	605a      	str	r2, [r3, #4]

		//4. Data transmission will be handled by the ISR code
	}

	return state;
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <SPI_ReceiveDataIT>:
 *
 * @return 			-
 *
 * @Note			- none
 */
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t len){
 8000dc6:	b480      	push	{r7}
 8000dc8:	b087      	sub	sp, #28
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	7f5b      	ldrb	r3, [r3, #29]
 8000dd6:	75fb      	strb	r3, [r7, #23]
	if (state != SPI_STATE_BUSY_RX) {
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d010      	beq.n	8000e00 <SPI_ReceiveDataIT+0x3a>
		//1. Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = len;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	619a      	str	r2, [r3, #24]

		//2. Mark the SPI state as busy in transmission so that no other
		//	 code can take over same SPI peripheral until transmission is over
		pSPIHandle->RxState = SPI_STATE_BUSY_RX;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2201      	movs	r2, #1
 8000dee:	775a      	strb	r2, [r3, #29]
		//3. Enable the RXEIE control bit to get interrupt whenever RXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000dfe:	605a      	str	r2, [r3, #4]

		//4. Data transmission will be handled by the ISR code
	}

	return state;
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <SPI_IRQHandling>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2;

	//check for TXE
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_TXE);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000e2e:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2){
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <SPI_IRQHandling+0x36>
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <SPI_IRQHandling+0x36>
		//handle TXE
		SPI_TXE_IT_Handle(pSPIHandle);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f832 	bl	8000ea6 <SPI_TXE_IT_Handle>
	}

	//check for RXNE
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e5c:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2){
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <SPI_IRQHandling+0x64>
 8000e64:	7bbb      	ldrb	r3, [r7, #14]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <SPI_IRQHandling+0x64>
		//handle RXNE
		SPI_RXNE_IT_Handle(pSPIHandle);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 f85b 	bl	8000f26 <SPI_RXNE_IT_Handle>
	}

	//check for OVR flag
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7c:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2){
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <SPI_IRQHandling+0x92>
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <SPI_IRQHandling+0x92>
		//handle OVR error
		SPI_OVR_IT_Handle(pSPIHandle);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 f886 	bl	8000faa <SPI_OVR_IT_Handle>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <SPI_TXE_IT_Handle>:



/*---- Some helper function implementations----*/
static void SPI_TXE_IT_Handle(SPI_Handle_t *pSPIHandle){
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	//Check the DFF bit in CR1
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d015      	beq.n	8000ee8 <SPI_TXE_IT_Handle+0x42>
		// 16 bit DFF
		// 2.1. Load the data to the DR
		pSPIHandle->pSPIx->DR = *((uint16_t*) pSPIHandle->pTxBuffer);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	881a      	ldrh	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen -= 2;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	1e9a      	subs	r2, r3, #2
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer ++;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	60da      	str	r2, [r3, #12]
		pSPIHandle->pTxBuffer ++;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	e00f      	b.n	8000f08 <SPI_TXE_IT_Handle+0x62>
	} else{
		// 8 bit DFF
		pSPIHandle->pSPIx->DR = *(pSPIHandle->pTxBuffer);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen --;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer ++;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d106      	bne.n	8000f1e <SPI_TXE_IT_Handle+0x78>
		SPI_CloseTransmission(pSPIHandle);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f862 	bl	8000fda <SPI_CloseTransmission>
		SPI_AppEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8000f16:	2101      	movs	r1, #1
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f892 	bl	8001042 <SPI_AppEventCallback>
	}
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <SPI_RXNE_IT_Handle>:
static void SPI_RXNE_IT_Handle(SPI_Handle_t *pSPIHandle){
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	//Check the DFF bit in CR1
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d016      	beq.n	8000f6a <SPI_RXNE_IT_Handle+0x44>
		// 16 bit DFF
		// 2.1. Load the data from DR to RxBuffer address
		*((uint16_t*) pSPIHandle->pRxBuffer) = (uint16_t)pSPIHandle->pSPIx->DR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	b292      	uxth	r2, r2
 8000f48:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	1e9a      	subs	r2, r3, #2
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	e010      	b.n	8000f8c <SPI_RXNE_IT_Handle+0x66>
	} else{
		// 8 bit DFF
		*(pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen --;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	1e5a      	subs	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer ++;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <SPI_RXNE_IT_Handle+0x7c>
		SPI_CloseReception(pSPIHandle);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f83a 	bl	800100e <SPI_CloseReception>
		SPI_AppEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f850 	bl	8001042 <SPI_AppEventCallback>
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <SPI_OVR_IT_Handle>:

static void SPI_OVR_IT_Handle(SPI_Handle_t *pSPIHandle){
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_STATE_BUSY_TX)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7f1b      	ldrb	r3, [r3, #28]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d007      	beq.n	8000fca <SPI_OVR_IT_Handle+0x20>
	{
		//Read both DR and SR
		temp = pSPIHandle->pSPIx->DR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	SPI_AppEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 8000fca:	2103      	movs	r1, #3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f838 	bl	8001042 <SPI_AppEventCallback>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <SPI_CloseTransmission>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	//Close SPI transmission and inform
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);	//Disable TX interrupts
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ff0:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	771a      	strb	r2, [r3, #28]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <SPI_CloseReception>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	//Close SPI transmission and inform
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);	//Disable RX interrupts
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001024:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	775a      	strb	r2, [r3, #29]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <SPI_AppEventCallback>:
}




__weak void SPI_AppEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv){
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	70fb      	strb	r3, [r7, #3]
	//This is a weak implementation . the user application may override this function.
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <std>:
 8001058:	2300      	movs	r3, #0
 800105a:	b510      	push	{r4, lr}
 800105c:	4604      	mov	r4, r0
 800105e:	e9c0 3300 	strd	r3, r3, [r0]
 8001062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001066:	6083      	str	r3, [r0, #8]
 8001068:	8181      	strh	r1, [r0, #12]
 800106a:	6643      	str	r3, [r0, #100]	@ 0x64
 800106c:	81c2      	strh	r2, [r0, #14]
 800106e:	6183      	str	r3, [r0, #24]
 8001070:	4619      	mov	r1, r3
 8001072:	2208      	movs	r2, #8
 8001074:	305c      	adds	r0, #92	@ 0x5c
 8001076:	f000 f9f9 	bl	800146c <memset>
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <std+0x58>)
 800107c:	6263      	str	r3, [r4, #36]	@ 0x24
 800107e:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <std+0x5c>)
 8001080:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <std+0x60>)
 8001084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <std+0x64>)
 8001088:	6323      	str	r3, [r4, #48]	@ 0x30
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <std+0x68>)
 800108c:	6224      	str	r4, [r4, #32]
 800108e:	429c      	cmp	r4, r3
 8001090:	d006      	beq.n	80010a0 <std+0x48>
 8001092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001096:	4294      	cmp	r4, r2
 8001098:	d002      	beq.n	80010a0 <std+0x48>
 800109a:	33d0      	adds	r3, #208	@ 0xd0
 800109c:	429c      	cmp	r4, r3
 800109e:	d105      	bne.n	80010ac <std+0x54>
 80010a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80010a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010a8:	f000 ba58 	b.w	800155c <__retarget_lock_init_recursive>
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	bf00      	nop
 80010b0:	080012bd 	.word	0x080012bd
 80010b4:	080012df 	.word	0x080012df
 80010b8:	08001317 	.word	0x08001317
 80010bc:	0800133b 	.word	0x0800133b
 80010c0:	20000294 	.word	0x20000294

080010c4 <stdio_exit_handler>:
 80010c4:	4a02      	ldr	r2, [pc, #8]	@ (80010d0 <stdio_exit_handler+0xc>)
 80010c6:	4903      	ldr	r1, [pc, #12]	@ (80010d4 <stdio_exit_handler+0x10>)
 80010c8:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <stdio_exit_handler+0x14>)
 80010ca:	f000 b869 	b.w	80011a0 <_fwalk_sglue>
 80010ce:	bf00      	nop
 80010d0:	20000000 	.word	0x20000000
 80010d4:	08001ded 	.word	0x08001ded
 80010d8:	20000010 	.word	0x20000010

080010dc <cleanup_stdio>:
 80010dc:	6841      	ldr	r1, [r0, #4]
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <cleanup_stdio+0x34>)
 80010e0:	4299      	cmp	r1, r3
 80010e2:	b510      	push	{r4, lr}
 80010e4:	4604      	mov	r4, r0
 80010e6:	d001      	beq.n	80010ec <cleanup_stdio+0x10>
 80010e8:	f000 fe80 	bl	8001dec <_fflush_r>
 80010ec:	68a1      	ldr	r1, [r4, #8]
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <cleanup_stdio+0x38>)
 80010f0:	4299      	cmp	r1, r3
 80010f2:	d002      	beq.n	80010fa <cleanup_stdio+0x1e>
 80010f4:	4620      	mov	r0, r4
 80010f6:	f000 fe79 	bl	8001dec <_fflush_r>
 80010fa:	68e1      	ldr	r1, [r4, #12]
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <cleanup_stdio+0x3c>)
 80010fe:	4299      	cmp	r1, r3
 8001100:	d004      	beq.n	800110c <cleanup_stdio+0x30>
 8001102:	4620      	mov	r0, r4
 8001104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001108:	f000 be70 	b.w	8001dec <_fflush_r>
 800110c:	bd10      	pop	{r4, pc}
 800110e:	bf00      	nop
 8001110:	20000294 	.word	0x20000294
 8001114:	200002fc 	.word	0x200002fc
 8001118:	20000364 	.word	0x20000364

0800111c <global_stdio_init.part.0>:
 800111c:	b510      	push	{r4, lr}
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <global_stdio_init.part.0+0x30>)
 8001120:	4c0b      	ldr	r4, [pc, #44]	@ (8001150 <global_stdio_init.part.0+0x34>)
 8001122:	4a0c      	ldr	r2, [pc, #48]	@ (8001154 <global_stdio_init.part.0+0x38>)
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	4620      	mov	r0, r4
 8001128:	2200      	movs	r2, #0
 800112a:	2104      	movs	r1, #4
 800112c:	f7ff ff94 	bl	8001058 <std>
 8001130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001134:	2201      	movs	r2, #1
 8001136:	2109      	movs	r1, #9
 8001138:	f7ff ff8e 	bl	8001058 <std>
 800113c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001140:	2202      	movs	r2, #2
 8001142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001146:	2112      	movs	r1, #18
 8001148:	f7ff bf86 	b.w	8001058 <std>
 800114c:	200003cc 	.word	0x200003cc
 8001150:	20000294 	.word	0x20000294
 8001154:	080010c5 	.word	0x080010c5

08001158 <__sfp_lock_acquire>:
 8001158:	4801      	ldr	r0, [pc, #4]	@ (8001160 <__sfp_lock_acquire+0x8>)
 800115a:	f000 ba00 	b.w	800155e <__retarget_lock_acquire_recursive>
 800115e:	bf00      	nop
 8001160:	200003d5 	.word	0x200003d5

08001164 <__sfp_lock_release>:
 8001164:	4801      	ldr	r0, [pc, #4]	@ (800116c <__sfp_lock_release+0x8>)
 8001166:	f000 b9fb 	b.w	8001560 <__retarget_lock_release_recursive>
 800116a:	bf00      	nop
 800116c:	200003d5 	.word	0x200003d5

08001170 <__sinit>:
 8001170:	b510      	push	{r4, lr}
 8001172:	4604      	mov	r4, r0
 8001174:	f7ff fff0 	bl	8001158 <__sfp_lock_acquire>
 8001178:	6a23      	ldr	r3, [r4, #32]
 800117a:	b11b      	cbz	r3, 8001184 <__sinit+0x14>
 800117c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001180:	f7ff bff0 	b.w	8001164 <__sfp_lock_release>
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <__sinit+0x28>)
 8001186:	6223      	str	r3, [r4, #32]
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__sinit+0x2c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f5      	bne.n	800117c <__sinit+0xc>
 8001190:	f7ff ffc4 	bl	800111c <global_stdio_init.part.0>
 8001194:	e7f2      	b.n	800117c <__sinit+0xc>
 8001196:	bf00      	nop
 8001198:	080010dd 	.word	0x080010dd
 800119c:	200003cc 	.word	0x200003cc

080011a0 <_fwalk_sglue>:
 80011a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011a4:	4607      	mov	r7, r0
 80011a6:	4688      	mov	r8, r1
 80011a8:	4614      	mov	r4, r2
 80011aa:	2600      	movs	r6, #0
 80011ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80011b0:	f1b9 0901 	subs.w	r9, r9, #1
 80011b4:	d505      	bpl.n	80011c2 <_fwalk_sglue+0x22>
 80011b6:	6824      	ldr	r4, [r4, #0]
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d1f7      	bne.n	80011ac <_fwalk_sglue+0xc>
 80011bc:	4630      	mov	r0, r6
 80011be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011c2:	89ab      	ldrh	r3, [r5, #12]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d907      	bls.n	80011d8 <_fwalk_sglue+0x38>
 80011c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80011cc:	3301      	adds	r3, #1
 80011ce:	d003      	beq.n	80011d8 <_fwalk_sglue+0x38>
 80011d0:	4629      	mov	r1, r5
 80011d2:	4638      	mov	r0, r7
 80011d4:	47c0      	blx	r8
 80011d6:	4306      	orrs	r6, r0
 80011d8:	3568      	adds	r5, #104	@ 0x68
 80011da:	e7e9      	b.n	80011b0 <_fwalk_sglue+0x10>

080011dc <iprintf>:
 80011dc:	b40f      	push	{r0, r1, r2, r3}
 80011de:	b507      	push	{r0, r1, r2, lr}
 80011e0:	4906      	ldr	r1, [pc, #24]	@ (80011fc <iprintf+0x20>)
 80011e2:	ab04      	add	r3, sp, #16
 80011e4:	6808      	ldr	r0, [r1, #0]
 80011e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80011ea:	6881      	ldr	r1, [r0, #8]
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f000 fad9 	bl	80017a4 <_vfiprintf_r>
 80011f2:	b003      	add	sp, #12
 80011f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr
 80011fc:	2000000c 	.word	0x2000000c

08001200 <_puts_r>:
 8001200:	6a03      	ldr	r3, [r0, #32]
 8001202:	b570      	push	{r4, r5, r6, lr}
 8001204:	6884      	ldr	r4, [r0, #8]
 8001206:	4605      	mov	r5, r0
 8001208:	460e      	mov	r6, r1
 800120a:	b90b      	cbnz	r3, 8001210 <_puts_r+0x10>
 800120c:	f7ff ffb0 	bl	8001170 <__sinit>
 8001210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001212:	07db      	lsls	r3, r3, #31
 8001214:	d405      	bmi.n	8001222 <_puts_r+0x22>
 8001216:	89a3      	ldrh	r3, [r4, #12]
 8001218:	0598      	lsls	r0, r3, #22
 800121a:	d402      	bmi.n	8001222 <_puts_r+0x22>
 800121c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800121e:	f000 f99e 	bl	800155e <__retarget_lock_acquire_recursive>
 8001222:	89a3      	ldrh	r3, [r4, #12]
 8001224:	0719      	lsls	r1, r3, #28
 8001226:	d502      	bpl.n	800122e <_puts_r+0x2e>
 8001228:	6923      	ldr	r3, [r4, #16]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d135      	bne.n	800129a <_puts_r+0x9a>
 800122e:	4621      	mov	r1, r4
 8001230:	4628      	mov	r0, r5
 8001232:	f000 f8c5 	bl	80013c0 <__swsetup_r>
 8001236:	b380      	cbz	r0, 800129a <_puts_r+0x9a>
 8001238:	f04f 35ff 	mov.w	r5, #4294967295
 800123c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800123e:	07da      	lsls	r2, r3, #31
 8001240:	d405      	bmi.n	800124e <_puts_r+0x4e>
 8001242:	89a3      	ldrh	r3, [r4, #12]
 8001244:	059b      	lsls	r3, r3, #22
 8001246:	d402      	bmi.n	800124e <_puts_r+0x4e>
 8001248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800124a:	f000 f989 	bl	8001560 <__retarget_lock_release_recursive>
 800124e:	4628      	mov	r0, r5
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	2b00      	cmp	r3, #0
 8001254:	da04      	bge.n	8001260 <_puts_r+0x60>
 8001256:	69a2      	ldr	r2, [r4, #24]
 8001258:	429a      	cmp	r2, r3
 800125a:	dc17      	bgt.n	800128c <_puts_r+0x8c>
 800125c:	290a      	cmp	r1, #10
 800125e:	d015      	beq.n	800128c <_puts_r+0x8c>
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	6022      	str	r2, [r4, #0]
 8001266:	7019      	strb	r1, [r3, #0]
 8001268:	68a3      	ldr	r3, [r4, #8]
 800126a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800126e:	3b01      	subs	r3, #1
 8001270:	60a3      	str	r3, [r4, #8]
 8001272:	2900      	cmp	r1, #0
 8001274:	d1ed      	bne.n	8001252 <_puts_r+0x52>
 8001276:	2b00      	cmp	r3, #0
 8001278:	da11      	bge.n	800129e <_puts_r+0x9e>
 800127a:	4622      	mov	r2, r4
 800127c:	210a      	movs	r1, #10
 800127e:	4628      	mov	r0, r5
 8001280:	f000 f85f 	bl	8001342 <__swbuf_r>
 8001284:	3001      	adds	r0, #1
 8001286:	d0d7      	beq.n	8001238 <_puts_r+0x38>
 8001288:	250a      	movs	r5, #10
 800128a:	e7d7      	b.n	800123c <_puts_r+0x3c>
 800128c:	4622      	mov	r2, r4
 800128e:	4628      	mov	r0, r5
 8001290:	f000 f857 	bl	8001342 <__swbuf_r>
 8001294:	3001      	adds	r0, #1
 8001296:	d1e7      	bne.n	8001268 <_puts_r+0x68>
 8001298:	e7ce      	b.n	8001238 <_puts_r+0x38>
 800129a:	3e01      	subs	r6, #1
 800129c:	e7e4      	b.n	8001268 <_puts_r+0x68>
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	6022      	str	r2, [r4, #0]
 80012a4:	220a      	movs	r2, #10
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e7ee      	b.n	8001288 <_puts_r+0x88>
	...

080012ac <puts>:
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <puts+0xc>)
 80012ae:	4601      	mov	r1, r0
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	f7ff bfa5 	b.w	8001200 <_puts_r>
 80012b6:	bf00      	nop
 80012b8:	2000000c 	.word	0x2000000c

080012bc <__sread>:
 80012bc:	b510      	push	{r4, lr}
 80012be:	460c      	mov	r4, r1
 80012c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c4:	f000 f8fc 	bl	80014c0 <_read_r>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	bfab      	itete	ge
 80012cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80012ce:	89a3      	ldrhlt	r3, [r4, #12]
 80012d0:	181b      	addge	r3, r3, r0
 80012d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80012d6:	bfac      	ite	ge
 80012d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80012da:	81a3      	strhlt	r3, [r4, #12]
 80012dc:	bd10      	pop	{r4, pc}

080012de <__swrite>:
 80012de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e2:	461f      	mov	r7, r3
 80012e4:	898b      	ldrh	r3, [r1, #12]
 80012e6:	05db      	lsls	r3, r3, #23
 80012e8:	4605      	mov	r5, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	4616      	mov	r6, r2
 80012ee:	d505      	bpl.n	80012fc <__swrite+0x1e>
 80012f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012f4:	2302      	movs	r3, #2
 80012f6:	2200      	movs	r2, #0
 80012f8:	f000 f8d0 	bl	800149c <_lseek_r>
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001302:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001306:	81a3      	strh	r3, [r4, #12]
 8001308:	4632      	mov	r2, r6
 800130a:	463b      	mov	r3, r7
 800130c:	4628      	mov	r0, r5
 800130e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001312:	f000 b8e7 	b.w	80014e4 <_write_r>

08001316 <__sseek>:
 8001316:	b510      	push	{r4, lr}
 8001318:	460c      	mov	r4, r1
 800131a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800131e:	f000 f8bd 	bl	800149c <_lseek_r>
 8001322:	1c43      	adds	r3, r0, #1
 8001324:	89a3      	ldrh	r3, [r4, #12]
 8001326:	bf15      	itete	ne
 8001328:	6560      	strne	r0, [r4, #84]	@ 0x54
 800132a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800132e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001332:	81a3      	strheq	r3, [r4, #12]
 8001334:	bf18      	it	ne
 8001336:	81a3      	strhne	r3, [r4, #12]
 8001338:	bd10      	pop	{r4, pc}

0800133a <__sclose>:
 800133a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800133e:	f000 b89d 	b.w	800147c <_close_r>

08001342 <__swbuf_r>:
 8001342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001344:	460e      	mov	r6, r1
 8001346:	4614      	mov	r4, r2
 8001348:	4605      	mov	r5, r0
 800134a:	b118      	cbz	r0, 8001354 <__swbuf_r+0x12>
 800134c:	6a03      	ldr	r3, [r0, #32]
 800134e:	b90b      	cbnz	r3, 8001354 <__swbuf_r+0x12>
 8001350:	f7ff ff0e 	bl	8001170 <__sinit>
 8001354:	69a3      	ldr	r3, [r4, #24]
 8001356:	60a3      	str	r3, [r4, #8]
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	071a      	lsls	r2, r3, #28
 800135c:	d501      	bpl.n	8001362 <__swbuf_r+0x20>
 800135e:	6923      	ldr	r3, [r4, #16]
 8001360:	b943      	cbnz	r3, 8001374 <__swbuf_r+0x32>
 8001362:	4621      	mov	r1, r4
 8001364:	4628      	mov	r0, r5
 8001366:	f000 f82b 	bl	80013c0 <__swsetup_r>
 800136a:	b118      	cbz	r0, 8001374 <__swbuf_r+0x32>
 800136c:	f04f 37ff 	mov.w	r7, #4294967295
 8001370:	4638      	mov	r0, r7
 8001372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	6922      	ldr	r2, [r4, #16]
 8001378:	1a98      	subs	r0, r3, r2
 800137a:	6963      	ldr	r3, [r4, #20]
 800137c:	b2f6      	uxtb	r6, r6
 800137e:	4283      	cmp	r3, r0
 8001380:	4637      	mov	r7, r6
 8001382:	dc05      	bgt.n	8001390 <__swbuf_r+0x4e>
 8001384:	4621      	mov	r1, r4
 8001386:	4628      	mov	r0, r5
 8001388:	f000 fd30 	bl	8001dec <_fflush_r>
 800138c:	2800      	cmp	r0, #0
 800138e:	d1ed      	bne.n	800136c <__swbuf_r+0x2a>
 8001390:	68a3      	ldr	r3, [r4, #8]
 8001392:	3b01      	subs	r3, #1
 8001394:	60a3      	str	r3, [r4, #8]
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	6022      	str	r2, [r4, #0]
 800139c:	701e      	strb	r6, [r3, #0]
 800139e:	6962      	ldr	r2, [r4, #20]
 80013a0:	1c43      	adds	r3, r0, #1
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d004      	beq.n	80013b0 <__swbuf_r+0x6e>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	07db      	lsls	r3, r3, #31
 80013aa:	d5e1      	bpl.n	8001370 <__swbuf_r+0x2e>
 80013ac:	2e0a      	cmp	r6, #10
 80013ae:	d1df      	bne.n	8001370 <__swbuf_r+0x2e>
 80013b0:	4621      	mov	r1, r4
 80013b2:	4628      	mov	r0, r5
 80013b4:	f000 fd1a 	bl	8001dec <_fflush_r>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d0d9      	beq.n	8001370 <__swbuf_r+0x2e>
 80013bc:	e7d6      	b.n	800136c <__swbuf_r+0x2a>
	...

080013c0 <__swsetup_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	4b29      	ldr	r3, [pc, #164]	@ (8001468 <__swsetup_r+0xa8>)
 80013c4:	4605      	mov	r5, r0
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	460c      	mov	r4, r1
 80013ca:	b118      	cbz	r0, 80013d4 <__swsetup_r+0x14>
 80013cc:	6a03      	ldr	r3, [r0, #32]
 80013ce:	b90b      	cbnz	r3, 80013d4 <__swsetup_r+0x14>
 80013d0:	f7ff fece 	bl	8001170 <__sinit>
 80013d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013d8:	0719      	lsls	r1, r3, #28
 80013da:	d422      	bmi.n	8001422 <__swsetup_r+0x62>
 80013dc:	06da      	lsls	r2, r3, #27
 80013de:	d407      	bmi.n	80013f0 <__swsetup_r+0x30>
 80013e0:	2209      	movs	r2, #9
 80013e2:	602a      	str	r2, [r5, #0]
 80013e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e8:	81a3      	strh	r3, [r4, #12]
 80013ea:	f04f 30ff 	mov.w	r0, #4294967295
 80013ee:	e033      	b.n	8001458 <__swsetup_r+0x98>
 80013f0:	0758      	lsls	r0, r3, #29
 80013f2:	d512      	bpl.n	800141a <__swsetup_r+0x5a>
 80013f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013f6:	b141      	cbz	r1, 800140a <__swsetup_r+0x4a>
 80013f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013fc:	4299      	cmp	r1, r3
 80013fe:	d002      	beq.n	8001406 <__swsetup_r+0x46>
 8001400:	4628      	mov	r0, r5
 8001402:	f000 f8af 	bl	8001564 <_free_r>
 8001406:	2300      	movs	r3, #0
 8001408:	6363      	str	r3, [r4, #52]	@ 0x34
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001410:	81a3      	strh	r3, [r4, #12]
 8001412:	2300      	movs	r3, #0
 8001414:	6063      	str	r3, [r4, #4]
 8001416:	6923      	ldr	r3, [r4, #16]
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	89a3      	ldrh	r3, [r4, #12]
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	81a3      	strh	r3, [r4, #12]
 8001422:	6923      	ldr	r3, [r4, #16]
 8001424:	b94b      	cbnz	r3, 800143a <__swsetup_r+0x7a>
 8001426:	89a3      	ldrh	r3, [r4, #12]
 8001428:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800142c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001430:	d003      	beq.n	800143a <__swsetup_r+0x7a>
 8001432:	4621      	mov	r1, r4
 8001434:	4628      	mov	r0, r5
 8001436:	f000 fd27 	bl	8001e88 <__smakebuf_r>
 800143a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800143e:	f013 0201 	ands.w	r2, r3, #1
 8001442:	d00a      	beq.n	800145a <__swsetup_r+0x9a>
 8001444:	2200      	movs	r2, #0
 8001446:	60a2      	str	r2, [r4, #8]
 8001448:	6962      	ldr	r2, [r4, #20]
 800144a:	4252      	negs	r2, r2
 800144c:	61a2      	str	r2, [r4, #24]
 800144e:	6922      	ldr	r2, [r4, #16]
 8001450:	b942      	cbnz	r2, 8001464 <__swsetup_r+0xa4>
 8001452:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001456:	d1c5      	bne.n	80013e4 <__swsetup_r+0x24>
 8001458:	bd38      	pop	{r3, r4, r5, pc}
 800145a:	0799      	lsls	r1, r3, #30
 800145c:	bf58      	it	pl
 800145e:	6962      	ldrpl	r2, [r4, #20]
 8001460:	60a2      	str	r2, [r4, #8]
 8001462:	e7f4      	b.n	800144e <__swsetup_r+0x8e>
 8001464:	2000      	movs	r0, #0
 8001466:	e7f7      	b.n	8001458 <__swsetup_r+0x98>
 8001468:	2000000c 	.word	0x2000000c

0800146c <memset>:
 800146c:	4402      	add	r2, r0
 800146e:	4603      	mov	r3, r0
 8001470:	4293      	cmp	r3, r2
 8001472:	d100      	bne.n	8001476 <memset+0xa>
 8001474:	4770      	bx	lr
 8001476:	f803 1b01 	strb.w	r1, [r3], #1
 800147a:	e7f9      	b.n	8001470 <memset+0x4>

0800147c <_close_r>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	4d06      	ldr	r5, [pc, #24]	@ (8001498 <_close_r+0x1c>)
 8001480:	2300      	movs	r3, #0
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	602b      	str	r3, [r5, #0]
 8001488:	f7ff f84d 	bl	8000526 <_close>
 800148c:	1c43      	adds	r3, r0, #1
 800148e:	d102      	bne.n	8001496 <_close_r+0x1a>
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	b103      	cbz	r3, 8001496 <_close_r+0x1a>
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	bd38      	pop	{r3, r4, r5, pc}
 8001498:	200003d0 	.word	0x200003d0

0800149c <_lseek_r>:
 800149c:	b538      	push	{r3, r4, r5, lr}
 800149e:	4d07      	ldr	r5, [pc, #28]	@ (80014bc <_lseek_r+0x20>)
 80014a0:	4604      	mov	r4, r0
 80014a2:	4608      	mov	r0, r1
 80014a4:	4611      	mov	r1, r2
 80014a6:	2200      	movs	r2, #0
 80014a8:	602a      	str	r2, [r5, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	f7ff f85f 	bl	800056e <_lseek>
 80014b0:	1c43      	adds	r3, r0, #1
 80014b2:	d102      	bne.n	80014ba <_lseek_r+0x1e>
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	b103      	cbz	r3, 80014ba <_lseek_r+0x1e>
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	bd38      	pop	{r3, r4, r5, pc}
 80014bc:	200003d0 	.word	0x200003d0

080014c0 <_read_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4d07      	ldr	r5, [pc, #28]	@ (80014e0 <_read_r+0x20>)
 80014c4:	4604      	mov	r4, r0
 80014c6:	4608      	mov	r0, r1
 80014c8:	4611      	mov	r1, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	602a      	str	r2, [r5, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	f7fe fff0 	bl	80004b4 <_read>
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	d102      	bne.n	80014de <_read_r+0x1e>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	b103      	cbz	r3, 80014de <_read_r+0x1e>
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	bd38      	pop	{r3, r4, r5, pc}
 80014e0:	200003d0 	.word	0x200003d0

080014e4 <_write_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4d07      	ldr	r5, [pc, #28]	@ (8001504 <_write_r+0x20>)
 80014e8:	4604      	mov	r4, r0
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	2200      	movs	r2, #0
 80014f0:	602a      	str	r2, [r5, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	f7fe fffb 	bl	80004ee <_write>
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d102      	bne.n	8001502 <_write_r+0x1e>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	b103      	cbz	r3, 8001502 <_write_r+0x1e>
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	200003d0 	.word	0x200003d0

08001508 <__errno>:
 8001508:	4b01      	ldr	r3, [pc, #4]	@ (8001510 <__errno+0x8>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000000c 	.word	0x2000000c

08001514 <__libc_init_array>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	4d0d      	ldr	r5, [pc, #52]	@ (800154c <__libc_init_array+0x38>)
 8001518:	4c0d      	ldr	r4, [pc, #52]	@ (8001550 <__libc_init_array+0x3c>)
 800151a:	1b64      	subs	r4, r4, r5
 800151c:	10a4      	asrs	r4, r4, #2
 800151e:	2600      	movs	r6, #0
 8001520:	42a6      	cmp	r6, r4
 8001522:	d109      	bne.n	8001538 <__libc_init_array+0x24>
 8001524:	4d0b      	ldr	r5, [pc, #44]	@ (8001554 <__libc_init_array+0x40>)
 8001526:	4c0c      	ldr	r4, [pc, #48]	@ (8001558 <__libc_init_array+0x44>)
 8001528:	f000 fd1c 	bl	8001f64 <_init>
 800152c:	1b64      	subs	r4, r4, r5
 800152e:	10a4      	asrs	r4, r4, #2
 8001530:	2600      	movs	r6, #0
 8001532:	42a6      	cmp	r6, r4
 8001534:	d105      	bne.n	8001542 <__libc_init_array+0x2e>
 8001536:	bd70      	pop	{r4, r5, r6, pc}
 8001538:	f855 3b04 	ldr.w	r3, [r5], #4
 800153c:	4798      	blx	r3
 800153e:	3601      	adds	r6, #1
 8001540:	e7ee      	b.n	8001520 <__libc_init_array+0xc>
 8001542:	f855 3b04 	ldr.w	r3, [r5], #4
 8001546:	4798      	blx	r3
 8001548:	3601      	adds	r6, #1
 800154a:	e7f2      	b.n	8001532 <__libc_init_array+0x1e>
 800154c:	08001fe4 	.word	0x08001fe4
 8001550:	08001fe4 	.word	0x08001fe4
 8001554:	08001fe4 	.word	0x08001fe4
 8001558:	08001fe8 	.word	0x08001fe8

0800155c <__retarget_lock_init_recursive>:
 800155c:	4770      	bx	lr

0800155e <__retarget_lock_acquire_recursive>:
 800155e:	4770      	bx	lr

08001560 <__retarget_lock_release_recursive>:
 8001560:	4770      	bx	lr
	...

08001564 <_free_r>:
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4605      	mov	r5, r0
 8001568:	2900      	cmp	r1, #0
 800156a:	d041      	beq.n	80015f0 <_free_r+0x8c>
 800156c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001570:	1f0c      	subs	r4, r1, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	bfb8      	it	lt
 8001576:	18e4      	addlt	r4, r4, r3
 8001578:	f000 f8e0 	bl	800173c <__malloc_lock>
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <_free_r+0x90>)
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	b933      	cbnz	r3, 8001590 <_free_r+0x2c>
 8001582:	6063      	str	r3, [r4, #4]
 8001584:	6014      	str	r4, [r2, #0]
 8001586:	4628      	mov	r0, r5
 8001588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800158c:	f000 b8dc 	b.w	8001748 <__malloc_unlock>
 8001590:	42a3      	cmp	r3, r4
 8001592:	d908      	bls.n	80015a6 <_free_r+0x42>
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	1821      	adds	r1, r4, r0
 8001598:	428b      	cmp	r3, r1
 800159a:	bf01      	itttt	eq
 800159c:	6819      	ldreq	r1, [r3, #0]
 800159e:	685b      	ldreq	r3, [r3, #4]
 80015a0:	1809      	addeq	r1, r1, r0
 80015a2:	6021      	streq	r1, [r4, #0]
 80015a4:	e7ed      	b.n	8001582 <_free_r+0x1e>
 80015a6:	461a      	mov	r2, r3
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	b10b      	cbz	r3, 80015b0 <_free_r+0x4c>
 80015ac:	42a3      	cmp	r3, r4
 80015ae:	d9fa      	bls.n	80015a6 <_free_r+0x42>
 80015b0:	6811      	ldr	r1, [r2, #0]
 80015b2:	1850      	adds	r0, r2, r1
 80015b4:	42a0      	cmp	r0, r4
 80015b6:	d10b      	bne.n	80015d0 <_free_r+0x6c>
 80015b8:	6820      	ldr	r0, [r4, #0]
 80015ba:	4401      	add	r1, r0
 80015bc:	1850      	adds	r0, r2, r1
 80015be:	4283      	cmp	r3, r0
 80015c0:	6011      	str	r1, [r2, #0]
 80015c2:	d1e0      	bne.n	8001586 <_free_r+0x22>
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	6053      	str	r3, [r2, #4]
 80015ca:	4408      	add	r0, r1
 80015cc:	6010      	str	r0, [r2, #0]
 80015ce:	e7da      	b.n	8001586 <_free_r+0x22>
 80015d0:	d902      	bls.n	80015d8 <_free_r+0x74>
 80015d2:	230c      	movs	r3, #12
 80015d4:	602b      	str	r3, [r5, #0]
 80015d6:	e7d6      	b.n	8001586 <_free_r+0x22>
 80015d8:	6820      	ldr	r0, [r4, #0]
 80015da:	1821      	adds	r1, r4, r0
 80015dc:	428b      	cmp	r3, r1
 80015de:	bf04      	itt	eq
 80015e0:	6819      	ldreq	r1, [r3, #0]
 80015e2:	685b      	ldreq	r3, [r3, #4]
 80015e4:	6063      	str	r3, [r4, #4]
 80015e6:	bf04      	itt	eq
 80015e8:	1809      	addeq	r1, r1, r0
 80015ea:	6021      	streq	r1, [r4, #0]
 80015ec:	6054      	str	r4, [r2, #4]
 80015ee:	e7ca      	b.n	8001586 <_free_r+0x22>
 80015f0:	bd38      	pop	{r3, r4, r5, pc}
 80015f2:	bf00      	nop
 80015f4:	200003dc 	.word	0x200003dc

080015f8 <sbrk_aligned>:
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4e0f      	ldr	r6, [pc, #60]	@ (8001638 <sbrk_aligned+0x40>)
 80015fc:	460c      	mov	r4, r1
 80015fe:	6831      	ldr	r1, [r6, #0]
 8001600:	4605      	mov	r5, r0
 8001602:	b911      	cbnz	r1, 800160a <sbrk_aligned+0x12>
 8001604:	f000 fc9e 	bl	8001f44 <_sbrk_r>
 8001608:	6030      	str	r0, [r6, #0]
 800160a:	4621      	mov	r1, r4
 800160c:	4628      	mov	r0, r5
 800160e:	f000 fc99 	bl	8001f44 <_sbrk_r>
 8001612:	1c43      	adds	r3, r0, #1
 8001614:	d103      	bne.n	800161e <sbrk_aligned+0x26>
 8001616:	f04f 34ff 	mov.w	r4, #4294967295
 800161a:	4620      	mov	r0, r4
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	1cc4      	adds	r4, r0, #3
 8001620:	f024 0403 	bic.w	r4, r4, #3
 8001624:	42a0      	cmp	r0, r4
 8001626:	d0f8      	beq.n	800161a <sbrk_aligned+0x22>
 8001628:	1a21      	subs	r1, r4, r0
 800162a:	4628      	mov	r0, r5
 800162c:	f000 fc8a 	bl	8001f44 <_sbrk_r>
 8001630:	3001      	adds	r0, #1
 8001632:	d1f2      	bne.n	800161a <sbrk_aligned+0x22>
 8001634:	e7ef      	b.n	8001616 <sbrk_aligned+0x1e>
 8001636:	bf00      	nop
 8001638:	200003d8 	.word	0x200003d8

0800163c <_malloc_r>:
 800163c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001640:	1ccd      	adds	r5, r1, #3
 8001642:	f025 0503 	bic.w	r5, r5, #3
 8001646:	3508      	adds	r5, #8
 8001648:	2d0c      	cmp	r5, #12
 800164a:	bf38      	it	cc
 800164c:	250c      	movcc	r5, #12
 800164e:	2d00      	cmp	r5, #0
 8001650:	4606      	mov	r6, r0
 8001652:	db01      	blt.n	8001658 <_malloc_r+0x1c>
 8001654:	42a9      	cmp	r1, r5
 8001656:	d904      	bls.n	8001662 <_malloc_r+0x26>
 8001658:	230c      	movs	r3, #12
 800165a:	6033      	str	r3, [r6, #0]
 800165c:	2000      	movs	r0, #0
 800165e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001738 <_malloc_r+0xfc>
 8001666:	f000 f869 	bl	800173c <__malloc_lock>
 800166a:	f8d8 3000 	ldr.w	r3, [r8]
 800166e:	461c      	mov	r4, r3
 8001670:	bb44      	cbnz	r4, 80016c4 <_malloc_r+0x88>
 8001672:	4629      	mov	r1, r5
 8001674:	4630      	mov	r0, r6
 8001676:	f7ff ffbf 	bl	80015f8 <sbrk_aligned>
 800167a:	1c43      	adds	r3, r0, #1
 800167c:	4604      	mov	r4, r0
 800167e:	d158      	bne.n	8001732 <_malloc_r+0xf6>
 8001680:	f8d8 4000 	ldr.w	r4, [r8]
 8001684:	4627      	mov	r7, r4
 8001686:	2f00      	cmp	r7, #0
 8001688:	d143      	bne.n	8001712 <_malloc_r+0xd6>
 800168a:	2c00      	cmp	r4, #0
 800168c:	d04b      	beq.n	8001726 <_malloc_r+0xea>
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	4639      	mov	r1, r7
 8001692:	4630      	mov	r0, r6
 8001694:	eb04 0903 	add.w	r9, r4, r3
 8001698:	f000 fc54 	bl	8001f44 <_sbrk_r>
 800169c:	4581      	cmp	r9, r0
 800169e:	d142      	bne.n	8001726 <_malloc_r+0xea>
 80016a0:	6821      	ldr	r1, [r4, #0]
 80016a2:	1a6d      	subs	r5, r5, r1
 80016a4:	4629      	mov	r1, r5
 80016a6:	4630      	mov	r0, r6
 80016a8:	f7ff ffa6 	bl	80015f8 <sbrk_aligned>
 80016ac:	3001      	adds	r0, #1
 80016ae:	d03a      	beq.n	8001726 <_malloc_r+0xea>
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	442b      	add	r3, r5
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	f8d8 3000 	ldr.w	r3, [r8]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	bb62      	cbnz	r2, 8001718 <_malloc_r+0xdc>
 80016be:	f8c8 7000 	str.w	r7, [r8]
 80016c2:	e00f      	b.n	80016e4 <_malloc_r+0xa8>
 80016c4:	6822      	ldr	r2, [r4, #0]
 80016c6:	1b52      	subs	r2, r2, r5
 80016c8:	d420      	bmi.n	800170c <_malloc_r+0xd0>
 80016ca:	2a0b      	cmp	r2, #11
 80016cc:	d917      	bls.n	80016fe <_malloc_r+0xc2>
 80016ce:	1961      	adds	r1, r4, r5
 80016d0:	42a3      	cmp	r3, r4
 80016d2:	6025      	str	r5, [r4, #0]
 80016d4:	bf18      	it	ne
 80016d6:	6059      	strne	r1, [r3, #4]
 80016d8:	6863      	ldr	r3, [r4, #4]
 80016da:	bf08      	it	eq
 80016dc:	f8c8 1000 	streq.w	r1, [r8]
 80016e0:	5162      	str	r2, [r4, r5]
 80016e2:	604b      	str	r3, [r1, #4]
 80016e4:	4630      	mov	r0, r6
 80016e6:	f000 f82f 	bl	8001748 <__malloc_unlock>
 80016ea:	f104 000b 	add.w	r0, r4, #11
 80016ee:	1d23      	adds	r3, r4, #4
 80016f0:	f020 0007 	bic.w	r0, r0, #7
 80016f4:	1ac2      	subs	r2, r0, r3
 80016f6:	bf1c      	itt	ne
 80016f8:	1a1b      	subne	r3, r3, r0
 80016fa:	50a3      	strne	r3, [r4, r2]
 80016fc:	e7af      	b.n	800165e <_malloc_r+0x22>
 80016fe:	6862      	ldr	r2, [r4, #4]
 8001700:	42a3      	cmp	r3, r4
 8001702:	bf0c      	ite	eq
 8001704:	f8c8 2000 	streq.w	r2, [r8]
 8001708:	605a      	strne	r2, [r3, #4]
 800170a:	e7eb      	b.n	80016e4 <_malloc_r+0xa8>
 800170c:	4623      	mov	r3, r4
 800170e:	6864      	ldr	r4, [r4, #4]
 8001710:	e7ae      	b.n	8001670 <_malloc_r+0x34>
 8001712:	463c      	mov	r4, r7
 8001714:	687f      	ldr	r7, [r7, #4]
 8001716:	e7b6      	b.n	8001686 <_malloc_r+0x4a>
 8001718:	461a      	mov	r2, r3
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	42a3      	cmp	r3, r4
 800171e:	d1fb      	bne.n	8001718 <_malloc_r+0xdc>
 8001720:	2300      	movs	r3, #0
 8001722:	6053      	str	r3, [r2, #4]
 8001724:	e7de      	b.n	80016e4 <_malloc_r+0xa8>
 8001726:	230c      	movs	r3, #12
 8001728:	6033      	str	r3, [r6, #0]
 800172a:	4630      	mov	r0, r6
 800172c:	f000 f80c 	bl	8001748 <__malloc_unlock>
 8001730:	e794      	b.n	800165c <_malloc_r+0x20>
 8001732:	6005      	str	r5, [r0, #0]
 8001734:	e7d6      	b.n	80016e4 <_malloc_r+0xa8>
 8001736:	bf00      	nop
 8001738:	200003dc 	.word	0x200003dc

0800173c <__malloc_lock>:
 800173c:	4801      	ldr	r0, [pc, #4]	@ (8001744 <__malloc_lock+0x8>)
 800173e:	f7ff bf0e 	b.w	800155e <__retarget_lock_acquire_recursive>
 8001742:	bf00      	nop
 8001744:	200003d4 	.word	0x200003d4

08001748 <__malloc_unlock>:
 8001748:	4801      	ldr	r0, [pc, #4]	@ (8001750 <__malloc_unlock+0x8>)
 800174a:	f7ff bf09 	b.w	8001560 <__retarget_lock_release_recursive>
 800174e:	bf00      	nop
 8001750:	200003d4 	.word	0x200003d4

08001754 <__sfputc_r>:
 8001754:	6893      	ldr	r3, [r2, #8]
 8001756:	3b01      	subs	r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	b410      	push	{r4}
 800175c:	6093      	str	r3, [r2, #8]
 800175e:	da07      	bge.n	8001770 <__sfputc_r+0x1c>
 8001760:	6994      	ldr	r4, [r2, #24]
 8001762:	42a3      	cmp	r3, r4
 8001764:	db01      	blt.n	800176a <__sfputc_r+0x16>
 8001766:	290a      	cmp	r1, #10
 8001768:	d102      	bne.n	8001770 <__sfputc_r+0x1c>
 800176a:	bc10      	pop	{r4}
 800176c:	f7ff bde9 	b.w	8001342 <__swbuf_r>
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	1c58      	adds	r0, r3, #1
 8001774:	6010      	str	r0, [r2, #0]
 8001776:	7019      	strb	r1, [r3, #0]
 8001778:	4608      	mov	r0, r1
 800177a:	bc10      	pop	{r4}
 800177c:	4770      	bx	lr

0800177e <__sfputs_r>:
 800177e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001780:	4606      	mov	r6, r0
 8001782:	460f      	mov	r7, r1
 8001784:	4614      	mov	r4, r2
 8001786:	18d5      	adds	r5, r2, r3
 8001788:	42ac      	cmp	r4, r5
 800178a:	d101      	bne.n	8001790 <__sfputs_r+0x12>
 800178c:	2000      	movs	r0, #0
 800178e:	e007      	b.n	80017a0 <__sfputs_r+0x22>
 8001790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001794:	463a      	mov	r2, r7
 8001796:	4630      	mov	r0, r6
 8001798:	f7ff ffdc 	bl	8001754 <__sfputc_r>
 800179c:	1c43      	adds	r3, r0, #1
 800179e:	d1f3      	bne.n	8001788 <__sfputs_r+0xa>
 80017a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017a4 <_vfiprintf_r>:
 80017a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a8:	460d      	mov	r5, r1
 80017aa:	b09d      	sub	sp, #116	@ 0x74
 80017ac:	4614      	mov	r4, r2
 80017ae:	4698      	mov	r8, r3
 80017b0:	4606      	mov	r6, r0
 80017b2:	b118      	cbz	r0, 80017bc <_vfiprintf_r+0x18>
 80017b4:	6a03      	ldr	r3, [r0, #32]
 80017b6:	b90b      	cbnz	r3, 80017bc <_vfiprintf_r+0x18>
 80017b8:	f7ff fcda 	bl	8001170 <__sinit>
 80017bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017be:	07d9      	lsls	r1, r3, #31
 80017c0:	d405      	bmi.n	80017ce <_vfiprintf_r+0x2a>
 80017c2:	89ab      	ldrh	r3, [r5, #12]
 80017c4:	059a      	lsls	r2, r3, #22
 80017c6:	d402      	bmi.n	80017ce <_vfiprintf_r+0x2a>
 80017c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80017ca:	f7ff fec8 	bl	800155e <__retarget_lock_acquire_recursive>
 80017ce:	89ab      	ldrh	r3, [r5, #12]
 80017d0:	071b      	lsls	r3, r3, #28
 80017d2:	d501      	bpl.n	80017d8 <_vfiprintf_r+0x34>
 80017d4:	692b      	ldr	r3, [r5, #16]
 80017d6:	b99b      	cbnz	r3, 8001800 <_vfiprintf_r+0x5c>
 80017d8:	4629      	mov	r1, r5
 80017da:	4630      	mov	r0, r6
 80017dc:	f7ff fdf0 	bl	80013c0 <__swsetup_r>
 80017e0:	b170      	cbz	r0, 8001800 <_vfiprintf_r+0x5c>
 80017e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017e4:	07dc      	lsls	r4, r3, #31
 80017e6:	d504      	bpl.n	80017f2 <_vfiprintf_r+0x4e>
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	b01d      	add	sp, #116	@ 0x74
 80017ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017f2:	89ab      	ldrh	r3, [r5, #12]
 80017f4:	0598      	lsls	r0, r3, #22
 80017f6:	d4f7      	bmi.n	80017e8 <_vfiprintf_r+0x44>
 80017f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80017fa:	f7ff feb1 	bl	8001560 <__retarget_lock_release_recursive>
 80017fe:	e7f3      	b.n	80017e8 <_vfiprintf_r+0x44>
 8001800:	2300      	movs	r3, #0
 8001802:	9309      	str	r3, [sp, #36]	@ 0x24
 8001804:	2320      	movs	r3, #32
 8001806:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800180a:	f8cd 800c 	str.w	r8, [sp, #12]
 800180e:	2330      	movs	r3, #48	@ 0x30
 8001810:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80019c0 <_vfiprintf_r+0x21c>
 8001814:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001818:	f04f 0901 	mov.w	r9, #1
 800181c:	4623      	mov	r3, r4
 800181e:	469a      	mov	sl, r3
 8001820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001824:	b10a      	cbz	r2, 800182a <_vfiprintf_r+0x86>
 8001826:	2a25      	cmp	r2, #37	@ 0x25
 8001828:	d1f9      	bne.n	800181e <_vfiprintf_r+0x7a>
 800182a:	ebba 0b04 	subs.w	fp, sl, r4
 800182e:	d00b      	beq.n	8001848 <_vfiprintf_r+0xa4>
 8001830:	465b      	mov	r3, fp
 8001832:	4622      	mov	r2, r4
 8001834:	4629      	mov	r1, r5
 8001836:	4630      	mov	r0, r6
 8001838:	f7ff ffa1 	bl	800177e <__sfputs_r>
 800183c:	3001      	adds	r0, #1
 800183e:	f000 80a7 	beq.w	8001990 <_vfiprintf_r+0x1ec>
 8001842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001844:	445a      	add	r2, fp
 8001846:	9209      	str	r2, [sp, #36]	@ 0x24
 8001848:	f89a 3000 	ldrb.w	r3, [sl]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 809f 	beq.w	8001990 <_vfiprintf_r+0x1ec>
 8001852:	2300      	movs	r3, #0
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800185c:	f10a 0a01 	add.w	sl, sl, #1
 8001860:	9304      	str	r3, [sp, #16]
 8001862:	9307      	str	r3, [sp, #28]
 8001864:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001868:	931a      	str	r3, [sp, #104]	@ 0x68
 800186a:	4654      	mov	r4, sl
 800186c:	2205      	movs	r2, #5
 800186e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001872:	4853      	ldr	r0, [pc, #332]	@ (80019c0 <_vfiprintf_r+0x21c>)
 8001874:	f7fe fcac 	bl	80001d0 <memchr>
 8001878:	9a04      	ldr	r2, [sp, #16]
 800187a:	b9d8      	cbnz	r0, 80018b4 <_vfiprintf_r+0x110>
 800187c:	06d1      	lsls	r1, r2, #27
 800187e:	bf44      	itt	mi
 8001880:	2320      	movmi	r3, #32
 8001882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001886:	0713      	lsls	r3, r2, #28
 8001888:	bf44      	itt	mi
 800188a:	232b      	movmi	r3, #43	@ 0x2b
 800188c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001890:	f89a 3000 	ldrb.w	r3, [sl]
 8001894:	2b2a      	cmp	r3, #42	@ 0x2a
 8001896:	d015      	beq.n	80018c4 <_vfiprintf_r+0x120>
 8001898:	9a07      	ldr	r2, [sp, #28]
 800189a:	4654      	mov	r4, sl
 800189c:	2000      	movs	r0, #0
 800189e:	f04f 0c0a 	mov.w	ip, #10
 80018a2:	4621      	mov	r1, r4
 80018a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018a8:	3b30      	subs	r3, #48	@ 0x30
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	d94b      	bls.n	8001946 <_vfiprintf_r+0x1a2>
 80018ae:	b1b0      	cbz	r0, 80018de <_vfiprintf_r+0x13a>
 80018b0:	9207      	str	r2, [sp, #28]
 80018b2:	e014      	b.n	80018de <_vfiprintf_r+0x13a>
 80018b4:	eba0 0308 	sub.w	r3, r0, r8
 80018b8:	fa09 f303 	lsl.w	r3, r9, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	9304      	str	r3, [sp, #16]
 80018c0:	46a2      	mov	sl, r4
 80018c2:	e7d2      	b.n	800186a <_vfiprintf_r+0xc6>
 80018c4:	9b03      	ldr	r3, [sp, #12]
 80018c6:	1d19      	adds	r1, r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	9103      	str	r1, [sp, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bfbb      	ittet	lt
 80018d0:	425b      	neglt	r3, r3
 80018d2:	f042 0202 	orrlt.w	r2, r2, #2
 80018d6:	9307      	strge	r3, [sp, #28]
 80018d8:	9307      	strlt	r3, [sp, #28]
 80018da:	bfb8      	it	lt
 80018dc:	9204      	strlt	r2, [sp, #16]
 80018de:	7823      	ldrb	r3, [r4, #0]
 80018e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80018e2:	d10a      	bne.n	80018fa <_vfiprintf_r+0x156>
 80018e4:	7863      	ldrb	r3, [r4, #1]
 80018e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80018e8:	d132      	bne.n	8001950 <_vfiprintf_r+0x1ac>
 80018ea:	9b03      	ldr	r3, [sp, #12]
 80018ec:	1d1a      	adds	r2, r3, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	9203      	str	r2, [sp, #12]
 80018f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80018f6:	3402      	adds	r4, #2
 80018f8:	9305      	str	r3, [sp, #20]
 80018fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80019c4 <_vfiprintf_r+0x220>
 80018fe:	7821      	ldrb	r1, [r4, #0]
 8001900:	2203      	movs	r2, #3
 8001902:	4650      	mov	r0, sl
 8001904:	f7fe fc64 	bl	80001d0 <memchr>
 8001908:	b138      	cbz	r0, 800191a <_vfiprintf_r+0x176>
 800190a:	9b04      	ldr	r3, [sp, #16]
 800190c:	eba0 000a 	sub.w	r0, r0, sl
 8001910:	2240      	movs	r2, #64	@ 0x40
 8001912:	4082      	lsls	r2, r0
 8001914:	4313      	orrs	r3, r2
 8001916:	3401      	adds	r4, #1
 8001918:	9304      	str	r3, [sp, #16]
 800191a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800191e:	482a      	ldr	r0, [pc, #168]	@ (80019c8 <_vfiprintf_r+0x224>)
 8001920:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001924:	2206      	movs	r2, #6
 8001926:	f7fe fc53 	bl	80001d0 <memchr>
 800192a:	2800      	cmp	r0, #0
 800192c:	d03f      	beq.n	80019ae <_vfiprintf_r+0x20a>
 800192e:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <_vfiprintf_r+0x228>)
 8001930:	bb1b      	cbnz	r3, 800197a <_vfiprintf_r+0x1d6>
 8001932:	9b03      	ldr	r3, [sp, #12]
 8001934:	3307      	adds	r3, #7
 8001936:	f023 0307 	bic.w	r3, r3, #7
 800193a:	3308      	adds	r3, #8
 800193c:	9303      	str	r3, [sp, #12]
 800193e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001940:	443b      	add	r3, r7
 8001942:	9309      	str	r3, [sp, #36]	@ 0x24
 8001944:	e76a      	b.n	800181c <_vfiprintf_r+0x78>
 8001946:	fb0c 3202 	mla	r2, ip, r2, r3
 800194a:	460c      	mov	r4, r1
 800194c:	2001      	movs	r0, #1
 800194e:	e7a8      	b.n	80018a2 <_vfiprintf_r+0xfe>
 8001950:	2300      	movs	r3, #0
 8001952:	3401      	adds	r4, #1
 8001954:	9305      	str	r3, [sp, #20]
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 0c0a 	mov.w	ip, #10
 800195c:	4620      	mov	r0, r4
 800195e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001962:	3a30      	subs	r2, #48	@ 0x30
 8001964:	2a09      	cmp	r2, #9
 8001966:	d903      	bls.n	8001970 <_vfiprintf_r+0x1cc>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0c6      	beq.n	80018fa <_vfiprintf_r+0x156>
 800196c:	9105      	str	r1, [sp, #20]
 800196e:	e7c4      	b.n	80018fa <_vfiprintf_r+0x156>
 8001970:	fb0c 2101 	mla	r1, ip, r1, r2
 8001974:	4604      	mov	r4, r0
 8001976:	2301      	movs	r3, #1
 8001978:	e7f0      	b.n	800195c <_vfiprintf_r+0x1b8>
 800197a:	ab03      	add	r3, sp, #12
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	462a      	mov	r2, r5
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_vfiprintf_r+0x22c>)
 8001982:	a904      	add	r1, sp, #16
 8001984:	4630      	mov	r0, r6
 8001986:	f3af 8000 	nop.w
 800198a:	4607      	mov	r7, r0
 800198c:	1c78      	adds	r0, r7, #1
 800198e:	d1d6      	bne.n	800193e <_vfiprintf_r+0x19a>
 8001990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001992:	07d9      	lsls	r1, r3, #31
 8001994:	d405      	bmi.n	80019a2 <_vfiprintf_r+0x1fe>
 8001996:	89ab      	ldrh	r3, [r5, #12]
 8001998:	059a      	lsls	r2, r3, #22
 800199a:	d402      	bmi.n	80019a2 <_vfiprintf_r+0x1fe>
 800199c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800199e:	f7ff fddf 	bl	8001560 <__retarget_lock_release_recursive>
 80019a2:	89ab      	ldrh	r3, [r5, #12]
 80019a4:	065b      	lsls	r3, r3, #25
 80019a6:	f53f af1f 	bmi.w	80017e8 <_vfiprintf_r+0x44>
 80019aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80019ac:	e71e      	b.n	80017ec <_vfiprintf_r+0x48>
 80019ae:	ab03      	add	r3, sp, #12
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	462a      	mov	r2, r5
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <_vfiprintf_r+0x22c>)
 80019b6:	a904      	add	r1, sp, #16
 80019b8:	4630      	mov	r0, r6
 80019ba:	f000 f879 	bl	8001ab0 <_printf_i>
 80019be:	e7e4      	b.n	800198a <_vfiprintf_r+0x1e6>
 80019c0:	08001fa7 	.word	0x08001fa7
 80019c4:	08001fad 	.word	0x08001fad
 80019c8:	08001fb1 	.word	0x08001fb1
 80019cc:	00000000 	.word	0x00000000
 80019d0:	0800177f 	.word	0x0800177f

080019d4 <_printf_common>:
 80019d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019d8:	4616      	mov	r6, r2
 80019da:	4698      	mov	r8, r3
 80019dc:	688a      	ldr	r2, [r1, #8]
 80019de:	690b      	ldr	r3, [r1, #16]
 80019e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80019e4:	4293      	cmp	r3, r2
 80019e6:	bfb8      	it	lt
 80019e8:	4613      	movlt	r3, r2
 80019ea:	6033      	str	r3, [r6, #0]
 80019ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80019f0:	4607      	mov	r7, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	b10a      	cbz	r2, 80019fa <_printf_common+0x26>
 80019f6:	3301      	adds	r3, #1
 80019f8:	6033      	str	r3, [r6, #0]
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	0699      	lsls	r1, r3, #26
 80019fe:	bf42      	ittt	mi
 8001a00:	6833      	ldrmi	r3, [r6, #0]
 8001a02:	3302      	addmi	r3, #2
 8001a04:	6033      	strmi	r3, [r6, #0]
 8001a06:	6825      	ldr	r5, [r4, #0]
 8001a08:	f015 0506 	ands.w	r5, r5, #6
 8001a0c:	d106      	bne.n	8001a1c <_printf_common+0x48>
 8001a0e:	f104 0a19 	add.w	sl, r4, #25
 8001a12:	68e3      	ldr	r3, [r4, #12]
 8001a14:	6832      	ldr	r2, [r6, #0]
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	42ab      	cmp	r3, r5
 8001a1a:	dc26      	bgt.n	8001a6a <_printf_common+0x96>
 8001a1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a20:	6822      	ldr	r2, [r4, #0]
 8001a22:	3b00      	subs	r3, #0
 8001a24:	bf18      	it	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	0692      	lsls	r2, r2, #26
 8001a2a:	d42b      	bmi.n	8001a84 <_printf_common+0xb0>
 8001a2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001a30:	4641      	mov	r1, r8
 8001a32:	4638      	mov	r0, r7
 8001a34:	47c8      	blx	r9
 8001a36:	3001      	adds	r0, #1
 8001a38:	d01e      	beq.n	8001a78 <_printf_common+0xa4>
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	6922      	ldr	r2, [r4, #16]
 8001a3e:	f003 0306 	and.w	r3, r3, #6
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf02      	ittt	eq
 8001a46:	68e5      	ldreq	r5, [r4, #12]
 8001a48:	6833      	ldreq	r3, [r6, #0]
 8001a4a:	1aed      	subeq	r5, r5, r3
 8001a4c:	68a3      	ldr	r3, [r4, #8]
 8001a4e:	bf0c      	ite	eq
 8001a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a54:	2500      	movne	r5, #0
 8001a56:	4293      	cmp	r3, r2
 8001a58:	bfc4      	itt	gt
 8001a5a:	1a9b      	subgt	r3, r3, r2
 8001a5c:	18ed      	addgt	r5, r5, r3
 8001a5e:	2600      	movs	r6, #0
 8001a60:	341a      	adds	r4, #26
 8001a62:	42b5      	cmp	r5, r6
 8001a64:	d11a      	bne.n	8001a9c <_printf_common+0xc8>
 8001a66:	2000      	movs	r0, #0
 8001a68:	e008      	b.n	8001a7c <_printf_common+0xa8>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4652      	mov	r2, sl
 8001a6e:	4641      	mov	r1, r8
 8001a70:	4638      	mov	r0, r7
 8001a72:	47c8      	blx	r9
 8001a74:	3001      	adds	r0, #1
 8001a76:	d103      	bne.n	8001a80 <_printf_common+0xac>
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a80:	3501      	adds	r5, #1
 8001a82:	e7c6      	b.n	8001a12 <_printf_common+0x3e>
 8001a84:	18e1      	adds	r1, r4, r3
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	2030      	movs	r0, #48	@ 0x30
 8001a8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a8e:	4422      	add	r2, r4
 8001a90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a98:	3302      	adds	r3, #2
 8001a9a:	e7c7      	b.n	8001a2c <_printf_common+0x58>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	4638      	mov	r0, r7
 8001aa4:	47c8      	blx	r9
 8001aa6:	3001      	adds	r0, #1
 8001aa8:	d0e6      	beq.n	8001a78 <_printf_common+0xa4>
 8001aaa:	3601      	adds	r6, #1
 8001aac:	e7d9      	b.n	8001a62 <_printf_common+0x8e>
	...

08001ab0 <_printf_i>:
 8001ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ab4:	7e0f      	ldrb	r7, [r1, #24]
 8001ab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ab8:	2f78      	cmp	r7, #120	@ 0x78
 8001aba:	4691      	mov	r9, r2
 8001abc:	4680      	mov	r8, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	469a      	mov	sl, r3
 8001ac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001ac6:	d807      	bhi.n	8001ad8 <_printf_i+0x28>
 8001ac8:	2f62      	cmp	r7, #98	@ 0x62
 8001aca:	d80a      	bhi.n	8001ae2 <_printf_i+0x32>
 8001acc:	2f00      	cmp	r7, #0
 8001ace:	f000 80d1 	beq.w	8001c74 <_printf_i+0x1c4>
 8001ad2:	2f58      	cmp	r7, #88	@ 0x58
 8001ad4:	f000 80b8 	beq.w	8001c48 <_printf_i+0x198>
 8001ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001adc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ae0:	e03a      	b.n	8001b58 <_printf_i+0xa8>
 8001ae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ae6:	2b15      	cmp	r3, #21
 8001ae8:	d8f6      	bhi.n	8001ad8 <_printf_i+0x28>
 8001aea:	a101      	add	r1, pc, #4	@ (adr r1, 8001af0 <_printf_i+0x40>)
 8001aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001af0:	08001b49 	.word	0x08001b49
 8001af4:	08001b5d 	.word	0x08001b5d
 8001af8:	08001ad9 	.word	0x08001ad9
 8001afc:	08001ad9 	.word	0x08001ad9
 8001b00:	08001ad9 	.word	0x08001ad9
 8001b04:	08001ad9 	.word	0x08001ad9
 8001b08:	08001b5d 	.word	0x08001b5d
 8001b0c:	08001ad9 	.word	0x08001ad9
 8001b10:	08001ad9 	.word	0x08001ad9
 8001b14:	08001ad9 	.word	0x08001ad9
 8001b18:	08001ad9 	.word	0x08001ad9
 8001b1c:	08001c5b 	.word	0x08001c5b
 8001b20:	08001b87 	.word	0x08001b87
 8001b24:	08001c15 	.word	0x08001c15
 8001b28:	08001ad9 	.word	0x08001ad9
 8001b2c:	08001ad9 	.word	0x08001ad9
 8001b30:	08001c7d 	.word	0x08001c7d
 8001b34:	08001ad9 	.word	0x08001ad9
 8001b38:	08001b87 	.word	0x08001b87
 8001b3c:	08001ad9 	.word	0x08001ad9
 8001b40:	08001ad9 	.word	0x08001ad9
 8001b44:	08001c1d 	.word	0x08001c1d
 8001b48:	6833      	ldr	r3, [r6, #0]
 8001b4a:	1d1a      	adds	r2, r3, #4
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6032      	str	r2, [r6, #0]
 8001b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e09c      	b.n	8001c96 <_printf_i+0x1e6>
 8001b5c:	6833      	ldr	r3, [r6, #0]
 8001b5e:	6820      	ldr	r0, [r4, #0]
 8001b60:	1d19      	adds	r1, r3, #4
 8001b62:	6031      	str	r1, [r6, #0]
 8001b64:	0606      	lsls	r6, r0, #24
 8001b66:	d501      	bpl.n	8001b6c <_printf_i+0xbc>
 8001b68:	681d      	ldr	r5, [r3, #0]
 8001b6a:	e003      	b.n	8001b74 <_printf_i+0xc4>
 8001b6c:	0645      	lsls	r5, r0, #25
 8001b6e:	d5fb      	bpl.n	8001b68 <_printf_i+0xb8>
 8001b70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b74:	2d00      	cmp	r5, #0
 8001b76:	da03      	bge.n	8001b80 <_printf_i+0xd0>
 8001b78:	232d      	movs	r3, #45	@ 0x2d
 8001b7a:	426d      	negs	r5, r5
 8001b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b80:	4858      	ldr	r0, [pc, #352]	@ (8001ce4 <_printf_i+0x234>)
 8001b82:	230a      	movs	r3, #10
 8001b84:	e011      	b.n	8001baa <_printf_i+0xfa>
 8001b86:	6821      	ldr	r1, [r4, #0]
 8001b88:	6833      	ldr	r3, [r6, #0]
 8001b8a:	0608      	lsls	r0, r1, #24
 8001b8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b90:	d402      	bmi.n	8001b98 <_printf_i+0xe8>
 8001b92:	0649      	lsls	r1, r1, #25
 8001b94:	bf48      	it	mi
 8001b96:	b2ad      	uxthmi	r5, r5
 8001b98:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b9a:	4852      	ldr	r0, [pc, #328]	@ (8001ce4 <_printf_i+0x234>)
 8001b9c:	6033      	str	r3, [r6, #0]
 8001b9e:	bf14      	ite	ne
 8001ba0:	230a      	movne	r3, #10
 8001ba2:	2308      	moveq	r3, #8
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001baa:	6866      	ldr	r6, [r4, #4]
 8001bac:	60a6      	str	r6, [r4, #8]
 8001bae:	2e00      	cmp	r6, #0
 8001bb0:	db05      	blt.n	8001bbe <_printf_i+0x10e>
 8001bb2:	6821      	ldr	r1, [r4, #0]
 8001bb4:	432e      	orrs	r6, r5
 8001bb6:	f021 0104 	bic.w	r1, r1, #4
 8001bba:	6021      	str	r1, [r4, #0]
 8001bbc:	d04b      	beq.n	8001c56 <_printf_i+0x1a6>
 8001bbe:	4616      	mov	r6, r2
 8001bc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001bc4:	fb03 5711 	mls	r7, r3, r1, r5
 8001bc8:	5dc7      	ldrb	r7, [r0, r7]
 8001bca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001bce:	462f      	mov	r7, r5
 8001bd0:	42bb      	cmp	r3, r7
 8001bd2:	460d      	mov	r5, r1
 8001bd4:	d9f4      	bls.n	8001bc0 <_printf_i+0x110>
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d10b      	bne.n	8001bf2 <_printf_i+0x142>
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	07df      	lsls	r7, r3, #31
 8001bde:	d508      	bpl.n	8001bf2 <_printf_i+0x142>
 8001be0:	6923      	ldr	r3, [r4, #16]
 8001be2:	6861      	ldr	r1, [r4, #4]
 8001be4:	4299      	cmp	r1, r3
 8001be6:	bfde      	ittt	le
 8001be8:	2330      	movle	r3, #48	@ 0x30
 8001bea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001bee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001bf2:	1b92      	subs	r2, r2, r6
 8001bf4:	6122      	str	r2, [r4, #16]
 8001bf6:	f8cd a000 	str.w	sl, [sp]
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	aa03      	add	r2, sp, #12
 8001bfe:	4621      	mov	r1, r4
 8001c00:	4640      	mov	r0, r8
 8001c02:	f7ff fee7 	bl	80019d4 <_printf_common>
 8001c06:	3001      	adds	r0, #1
 8001c08:	d14a      	bne.n	8001ca0 <_printf_i+0x1f0>
 8001c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0e:	b004      	add	sp, #16
 8001c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	f043 0320 	orr.w	r3, r3, #32
 8001c1a:	6023      	str	r3, [r4, #0]
 8001c1c:	4832      	ldr	r0, [pc, #200]	@ (8001ce8 <_printf_i+0x238>)
 8001c1e:	2778      	movs	r7, #120	@ 0x78
 8001c20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	6831      	ldr	r1, [r6, #0]
 8001c28:	061f      	lsls	r7, r3, #24
 8001c2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c2e:	d402      	bmi.n	8001c36 <_printf_i+0x186>
 8001c30:	065f      	lsls	r7, r3, #25
 8001c32:	bf48      	it	mi
 8001c34:	b2ad      	uxthmi	r5, r5
 8001c36:	6031      	str	r1, [r6, #0]
 8001c38:	07d9      	lsls	r1, r3, #31
 8001c3a:	bf44      	itt	mi
 8001c3c:	f043 0320 	orrmi.w	r3, r3, #32
 8001c40:	6023      	strmi	r3, [r4, #0]
 8001c42:	b11d      	cbz	r5, 8001c4c <_printf_i+0x19c>
 8001c44:	2310      	movs	r3, #16
 8001c46:	e7ad      	b.n	8001ba4 <_printf_i+0xf4>
 8001c48:	4826      	ldr	r0, [pc, #152]	@ (8001ce4 <_printf_i+0x234>)
 8001c4a:	e7e9      	b.n	8001c20 <_printf_i+0x170>
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	f023 0320 	bic.w	r3, r3, #32
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	e7f6      	b.n	8001c44 <_printf_i+0x194>
 8001c56:	4616      	mov	r6, r2
 8001c58:	e7bd      	b.n	8001bd6 <_printf_i+0x126>
 8001c5a:	6833      	ldr	r3, [r6, #0]
 8001c5c:	6825      	ldr	r5, [r4, #0]
 8001c5e:	6961      	ldr	r1, [r4, #20]
 8001c60:	1d18      	adds	r0, r3, #4
 8001c62:	6030      	str	r0, [r6, #0]
 8001c64:	062e      	lsls	r6, r5, #24
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	d501      	bpl.n	8001c6e <_printf_i+0x1be>
 8001c6a:	6019      	str	r1, [r3, #0]
 8001c6c:	e002      	b.n	8001c74 <_printf_i+0x1c4>
 8001c6e:	0668      	lsls	r0, r5, #25
 8001c70:	d5fb      	bpl.n	8001c6a <_printf_i+0x1ba>
 8001c72:	8019      	strh	r1, [r3, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	6123      	str	r3, [r4, #16]
 8001c78:	4616      	mov	r6, r2
 8001c7a:	e7bc      	b.n	8001bf6 <_printf_i+0x146>
 8001c7c:	6833      	ldr	r3, [r6, #0]
 8001c7e:	1d1a      	adds	r2, r3, #4
 8001c80:	6032      	str	r2, [r6, #0]
 8001c82:	681e      	ldr	r6, [r3, #0]
 8001c84:	6862      	ldr	r2, [r4, #4]
 8001c86:	2100      	movs	r1, #0
 8001c88:	4630      	mov	r0, r6
 8001c8a:	f7fe faa1 	bl	80001d0 <memchr>
 8001c8e:	b108      	cbz	r0, 8001c94 <_printf_i+0x1e4>
 8001c90:	1b80      	subs	r0, r0, r6
 8001c92:	6060      	str	r0, [r4, #4]
 8001c94:	6863      	ldr	r3, [r4, #4]
 8001c96:	6123      	str	r3, [r4, #16]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c9e:	e7aa      	b.n	8001bf6 <_printf_i+0x146>
 8001ca0:	6923      	ldr	r3, [r4, #16]
 8001ca2:	4632      	mov	r2, r6
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	4640      	mov	r0, r8
 8001ca8:	47d0      	blx	sl
 8001caa:	3001      	adds	r0, #1
 8001cac:	d0ad      	beq.n	8001c0a <_printf_i+0x15a>
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	079b      	lsls	r3, r3, #30
 8001cb2:	d413      	bmi.n	8001cdc <_printf_i+0x22c>
 8001cb4:	68e0      	ldr	r0, [r4, #12]
 8001cb6:	9b03      	ldr	r3, [sp, #12]
 8001cb8:	4298      	cmp	r0, r3
 8001cba:	bfb8      	it	lt
 8001cbc:	4618      	movlt	r0, r3
 8001cbe:	e7a6      	b.n	8001c0e <_printf_i+0x15e>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	4632      	mov	r2, r6
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	4640      	mov	r0, r8
 8001cc8:	47d0      	blx	sl
 8001cca:	3001      	adds	r0, #1
 8001ccc:	d09d      	beq.n	8001c0a <_printf_i+0x15a>
 8001cce:	3501      	adds	r5, #1
 8001cd0:	68e3      	ldr	r3, [r4, #12]
 8001cd2:	9903      	ldr	r1, [sp, #12]
 8001cd4:	1a5b      	subs	r3, r3, r1
 8001cd6:	42ab      	cmp	r3, r5
 8001cd8:	dcf2      	bgt.n	8001cc0 <_printf_i+0x210>
 8001cda:	e7eb      	b.n	8001cb4 <_printf_i+0x204>
 8001cdc:	2500      	movs	r5, #0
 8001cde:	f104 0619 	add.w	r6, r4, #25
 8001ce2:	e7f5      	b.n	8001cd0 <_printf_i+0x220>
 8001ce4:	08001fb8 	.word	0x08001fb8
 8001ce8:	08001fc9 	.word	0x08001fc9

08001cec <__sflush_r>:
 8001cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf2:	0716      	lsls	r6, r2, #28
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	d454      	bmi.n	8001da4 <__sflush_r+0xb8>
 8001cfa:	684b      	ldr	r3, [r1, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	dc02      	bgt.n	8001d06 <__sflush_r+0x1a>
 8001d00:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dd48      	ble.n	8001d98 <__sflush_r+0xac>
 8001d06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d08:	2e00      	cmp	r6, #0
 8001d0a:	d045      	beq.n	8001d98 <__sflush_r+0xac>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001d12:	682f      	ldr	r7, [r5, #0]
 8001d14:	6a21      	ldr	r1, [r4, #32]
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	d030      	beq.n	8001d7c <__sflush_r+0x90>
 8001d1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	0759      	lsls	r1, r3, #29
 8001d20:	d505      	bpl.n	8001d2e <__sflush_r+0x42>
 8001d22:	6863      	ldr	r3, [r4, #4]
 8001d24:	1ad2      	subs	r2, r2, r3
 8001d26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d28:	b10b      	cbz	r3, 8001d2e <__sflush_r+0x42>
 8001d2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d32:	6a21      	ldr	r1, [r4, #32]
 8001d34:	4628      	mov	r0, r5
 8001d36:	47b0      	blx	r6
 8001d38:	1c43      	adds	r3, r0, #1
 8001d3a:	89a3      	ldrh	r3, [r4, #12]
 8001d3c:	d106      	bne.n	8001d4c <__sflush_r+0x60>
 8001d3e:	6829      	ldr	r1, [r5, #0]
 8001d40:	291d      	cmp	r1, #29
 8001d42:	d82b      	bhi.n	8001d9c <__sflush_r+0xb0>
 8001d44:	4a28      	ldr	r2, [pc, #160]	@ (8001de8 <__sflush_r+0xfc>)
 8001d46:	40ca      	lsrs	r2, r1
 8001d48:	07d6      	lsls	r6, r2, #31
 8001d4a:	d527      	bpl.n	8001d9c <__sflush_r+0xb0>
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6062      	str	r2, [r4, #4]
 8001d50:	04d9      	lsls	r1, r3, #19
 8001d52:	6922      	ldr	r2, [r4, #16]
 8001d54:	6022      	str	r2, [r4, #0]
 8001d56:	d504      	bpl.n	8001d62 <__sflush_r+0x76>
 8001d58:	1c42      	adds	r2, r0, #1
 8001d5a:	d101      	bne.n	8001d60 <__sflush_r+0x74>
 8001d5c:	682b      	ldr	r3, [r5, #0]
 8001d5e:	b903      	cbnz	r3, 8001d62 <__sflush_r+0x76>
 8001d60:	6560      	str	r0, [r4, #84]	@ 0x54
 8001d62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d64:	602f      	str	r7, [r5, #0]
 8001d66:	b1b9      	cbz	r1, 8001d98 <__sflush_r+0xac>
 8001d68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d6c:	4299      	cmp	r1, r3
 8001d6e:	d002      	beq.n	8001d76 <__sflush_r+0x8a>
 8001d70:	4628      	mov	r0, r5
 8001d72:	f7ff fbf7 	bl	8001564 <_free_r>
 8001d76:	2300      	movs	r3, #0
 8001d78:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d7a:	e00d      	b.n	8001d98 <__sflush_r+0xac>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4628      	mov	r0, r5
 8001d80:	47b0      	blx	r6
 8001d82:	4602      	mov	r2, r0
 8001d84:	1c50      	adds	r0, r2, #1
 8001d86:	d1c9      	bne.n	8001d1c <__sflush_r+0x30>
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0c6      	beq.n	8001d1c <__sflush_r+0x30>
 8001d8e:	2b1d      	cmp	r3, #29
 8001d90:	d001      	beq.n	8001d96 <__sflush_r+0xaa>
 8001d92:	2b16      	cmp	r3, #22
 8001d94:	d11d      	bne.n	8001dd2 <__sflush_r+0xe6>
 8001d96:	602f      	str	r7, [r5, #0]
 8001d98:	2000      	movs	r0, #0
 8001d9a:	e021      	b.n	8001de0 <__sflush_r+0xf4>
 8001d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	e01a      	b.n	8001dda <__sflush_r+0xee>
 8001da4:	690f      	ldr	r7, [r1, #16]
 8001da6:	2f00      	cmp	r7, #0
 8001da8:	d0f6      	beq.n	8001d98 <__sflush_r+0xac>
 8001daa:	0793      	lsls	r3, r2, #30
 8001dac:	680e      	ldr	r6, [r1, #0]
 8001dae:	bf08      	it	eq
 8001db0:	694b      	ldreq	r3, [r1, #20]
 8001db2:	600f      	str	r7, [r1, #0]
 8001db4:	bf18      	it	ne
 8001db6:	2300      	movne	r3, #0
 8001db8:	1bf6      	subs	r6, r6, r7
 8001dba:	608b      	str	r3, [r1, #8]
 8001dbc:	2e00      	cmp	r6, #0
 8001dbe:	ddeb      	ble.n	8001d98 <__sflush_r+0xac>
 8001dc0:	6a21      	ldr	r1, [r4, #32]
 8001dc2:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001dc6:	4633      	mov	r3, r6
 8001dc8:	463a      	mov	r2, r7
 8001dca:	4628      	mov	r0, r5
 8001dcc:	47e0      	blx	ip
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	dc07      	bgt.n	8001de2 <__sflush_r+0xf6>
 8001dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dda:	81a3      	strh	r3, [r4, #12]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001de2:	4407      	add	r7, r0
 8001de4:	1a36      	subs	r6, r6, r0
 8001de6:	e7e9      	b.n	8001dbc <__sflush_r+0xd0>
 8001de8:	20400001 	.word	0x20400001

08001dec <_fflush_r>:
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	690b      	ldr	r3, [r1, #16]
 8001df0:	4605      	mov	r5, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	b913      	cbnz	r3, 8001dfc <_fflush_r+0x10>
 8001df6:	2500      	movs	r5, #0
 8001df8:	4628      	mov	r0, r5
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
 8001dfc:	b118      	cbz	r0, 8001e06 <_fflush_r+0x1a>
 8001dfe:	6a03      	ldr	r3, [r0, #32]
 8001e00:	b90b      	cbnz	r3, 8001e06 <_fflush_r+0x1a>
 8001e02:	f7ff f9b5 	bl	8001170 <__sinit>
 8001e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f3      	beq.n	8001df6 <_fflush_r+0xa>
 8001e0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e10:	07d0      	lsls	r0, r2, #31
 8001e12:	d404      	bmi.n	8001e1e <_fflush_r+0x32>
 8001e14:	0599      	lsls	r1, r3, #22
 8001e16:	d402      	bmi.n	8001e1e <_fflush_r+0x32>
 8001e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e1a:	f7ff fba0 	bl	800155e <__retarget_lock_acquire_recursive>
 8001e1e:	4628      	mov	r0, r5
 8001e20:	4621      	mov	r1, r4
 8001e22:	f7ff ff63 	bl	8001cec <__sflush_r>
 8001e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e28:	07da      	lsls	r2, r3, #31
 8001e2a:	4605      	mov	r5, r0
 8001e2c:	d4e4      	bmi.n	8001df8 <_fflush_r+0xc>
 8001e2e:	89a3      	ldrh	r3, [r4, #12]
 8001e30:	059b      	lsls	r3, r3, #22
 8001e32:	d4e1      	bmi.n	8001df8 <_fflush_r+0xc>
 8001e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e36:	f7ff fb93 	bl	8001560 <__retarget_lock_release_recursive>
 8001e3a:	e7dd      	b.n	8001df8 <_fflush_r+0xc>

08001e3c <__swhatbuf_r>:
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	460c      	mov	r4, r1
 8001e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e44:	2900      	cmp	r1, #0
 8001e46:	b096      	sub	sp, #88	@ 0x58
 8001e48:	4615      	mov	r5, r2
 8001e4a:	461e      	mov	r6, r3
 8001e4c:	da0d      	bge.n	8001e6a <__swhatbuf_r+0x2e>
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2340      	movne	r3, #64	@ 0x40
 8001e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001e60:	2000      	movs	r0, #0
 8001e62:	6031      	str	r1, [r6, #0]
 8001e64:	602b      	str	r3, [r5, #0]
 8001e66:	b016      	add	sp, #88	@ 0x58
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
 8001e6a:	466a      	mov	r2, sp
 8001e6c:	f000 f848 	bl	8001f00 <_fstat_r>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	dbec      	blt.n	8001e4e <__swhatbuf_r+0x12>
 8001e74:	9901      	ldr	r1, [sp, #4]
 8001e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e7e:	4259      	negs	r1, r3
 8001e80:	4159      	adcs	r1, r3
 8001e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e86:	e7eb      	b.n	8001e60 <__swhatbuf_r+0x24>

08001e88 <__smakebuf_r>:
 8001e88:	898b      	ldrh	r3, [r1, #12]
 8001e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e8c:	079d      	lsls	r5, r3, #30
 8001e8e:	4606      	mov	r6, r0
 8001e90:	460c      	mov	r4, r1
 8001e92:	d507      	bpl.n	8001ea4 <__smakebuf_r+0x1c>
 8001e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001e98:	6023      	str	r3, [r4, #0]
 8001e9a:	6123      	str	r3, [r4, #16]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	6163      	str	r3, [r4, #20]
 8001ea0:	b003      	add	sp, #12
 8001ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea4:	ab01      	add	r3, sp, #4
 8001ea6:	466a      	mov	r2, sp
 8001ea8:	f7ff ffc8 	bl	8001e3c <__swhatbuf_r>
 8001eac:	9f00      	ldr	r7, [sp, #0]
 8001eae:	4605      	mov	r5, r0
 8001eb0:	4639      	mov	r1, r7
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	f7ff fbc2 	bl	800163c <_malloc_r>
 8001eb8:	b948      	cbnz	r0, 8001ece <__smakebuf_r+0x46>
 8001eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ebe:	059a      	lsls	r2, r3, #22
 8001ec0:	d4ee      	bmi.n	8001ea0 <__smakebuf_r+0x18>
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	81a3      	strh	r3, [r4, #12]
 8001ecc:	e7e2      	b.n	8001e94 <__smakebuf_r+0xc>
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	6020      	str	r0, [r4, #0]
 8001ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed6:	81a3      	strh	r3, [r4, #12]
 8001ed8:	9b01      	ldr	r3, [sp, #4]
 8001eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ede:	b15b      	cbz	r3, 8001ef8 <__smakebuf_r+0x70>
 8001ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ee4:	4630      	mov	r0, r6
 8001ee6:	f000 f81d 	bl	8001f24 <_isatty_r>
 8001eea:	b128      	cbz	r0, 8001ef8 <__smakebuf_r+0x70>
 8001eec:	89a3      	ldrh	r3, [r4, #12]
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	81a3      	strh	r3, [r4, #12]
 8001ef8:	89a3      	ldrh	r3, [r4, #12]
 8001efa:	431d      	orrs	r5, r3
 8001efc:	81a5      	strh	r5, [r4, #12]
 8001efe:	e7cf      	b.n	8001ea0 <__smakebuf_r+0x18>

08001f00 <_fstat_r>:
 8001f00:	b538      	push	{r3, r4, r5, lr}
 8001f02:	4d07      	ldr	r5, [pc, #28]	@ (8001f20 <_fstat_r+0x20>)
 8001f04:	2300      	movs	r3, #0
 8001f06:	4604      	mov	r4, r0
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	602b      	str	r3, [r5, #0]
 8001f0e:	f7fe fb15 	bl	800053c <_fstat>
 8001f12:	1c43      	adds	r3, r0, #1
 8001f14:	d102      	bne.n	8001f1c <_fstat_r+0x1c>
 8001f16:	682b      	ldr	r3, [r5, #0]
 8001f18:	b103      	cbz	r3, 8001f1c <_fstat_r+0x1c>
 8001f1a:	6023      	str	r3, [r4, #0]
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
 8001f1e:	bf00      	nop
 8001f20:	200003d0 	.word	0x200003d0

08001f24 <_isatty_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	4d06      	ldr	r5, [pc, #24]	@ (8001f40 <_isatty_r+0x1c>)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	602b      	str	r3, [r5, #0]
 8001f30:	f7fe fb13 	bl	800055a <_isatty>
 8001f34:	1c43      	adds	r3, r0, #1
 8001f36:	d102      	bne.n	8001f3e <_isatty_r+0x1a>
 8001f38:	682b      	ldr	r3, [r5, #0]
 8001f3a:	b103      	cbz	r3, 8001f3e <_isatty_r+0x1a>
 8001f3c:	6023      	str	r3, [r4, #0]
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
 8001f40:	200003d0 	.word	0x200003d0

08001f44 <_sbrk_r>:
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	4d06      	ldr	r5, [pc, #24]	@ (8001f60 <_sbrk_r+0x1c>)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	602b      	str	r3, [r5, #0]
 8001f50:	f7fe fb1a 	bl	8000588 <_sbrk>
 8001f54:	1c43      	adds	r3, r0, #1
 8001f56:	d102      	bne.n	8001f5e <_sbrk_r+0x1a>
 8001f58:	682b      	ldr	r3, [r5, #0]
 8001f5a:	b103      	cbz	r3, 8001f5e <_sbrk_r+0x1a>
 8001f5c:	6023      	str	r3, [r4, #0]
 8001f5e:	bd38      	pop	{r3, r4, r5, pc}
 8001f60:	200003d0 	.word	0x200003d0

08001f64 <_init>:
 8001f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f66:	bf00      	nop
 8001f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6a:	bc08      	pop	{r3}
 8001f6c:	469e      	mov	lr, r3
 8001f6e:	4770      	bx	lr

08001f70 <_fini>:
 8001f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f72:	bf00      	nop
 8001f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f76:	bc08      	pop	{r3}
 8001f78:	469e      	mov	lr, r3
 8001f7a:	4770      	bx	lr
