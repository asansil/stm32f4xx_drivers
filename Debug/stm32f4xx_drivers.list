
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000064c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d4  080007dc  000017dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007d4  080007d4  000017dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080007d4  080007d4  000017dc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080007d4  080007dc  000017dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d4  080007d4  000017d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007d8  080007d8  000017d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000017dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000017dc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a51  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002af  00000000  00000000  00002257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008a  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014de  00000000  00000000  0000265a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000db0  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005a54  00000000  00000000  000048e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000a33c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000026c  00000000  00000000  0000a380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0000a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007bc 	.word	0x080007bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080007bc 	.word	0x080007bc

080001c8 <delay>:

#define HIGH			1
#define BTN_PRESSED		HIGH


void delay(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	0007a11f 	.word	0x0007a11f

080001f4 <main>:


int main(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0

	// Green led
	GPIO_Handle_t GpioGLed;

	GpioGLed.pGPIOx = GPIOD;
 80001fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000264 <main+0x70>)
 80001fc:	60fb      	str	r3, [r7, #12]
	GpioGLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001fe:	230c      	movs	r3, #12
 8000200:	743b      	strb	r3, [r7, #16]
	GpioGLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000202:	2301      	movs	r3, #1
 8000204:	747b      	strb	r3, [r7, #17]
	GpioGLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000206:	2300      	movs	r3, #0
 8000208:	74bb      	strb	r3, [r7, #18]
	GpioGLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	753b      	strb	r3, [r7, #20]
	GpioGLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	74fb      	strb	r3, [r7, #19]

	// User button
	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOA;
 8000212:	4b15      	ldr	r3, [pc, #84]	@ (8000268 <main+0x74>)
 8000214:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000216:	2300      	movs	r3, #0
 8000218:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 800021a:	2305      	movs	r3, #5
 800021c:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VHIGH;
 800021e:	2303      	movs	r3, #3
 8000220:	71bb      	strb	r3, [r7, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]



	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000226:	2101      	movs	r1, #1
 8000228:	480e      	ldr	r0, [pc, #56]	@ (8000264 <main+0x70>)
 800022a:	f000 f859 	bl	80002e0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioGLed);
 800022e:	f107 030c 	add.w	r3, r7, #12
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f882 	bl	800033c <GPIO_Init>

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	480b      	ldr	r0, [pc, #44]	@ (8000268 <main+0x74>)
 800023c:	f000 f850 	bl	80002e0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioBtn);
 8000240:	463b      	mov	r3, r7
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f87a 	bl	800033c <GPIO_Init>

	//IRQ configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRI15);
 8000248:	210f      	movs	r1, #15
 800024a:	2006      	movs	r0, #6
 800024c:	f000 fa30 	bl	80006b0 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 8000250:	2101      	movs	r1, #1
 8000252:	2006      	movs	r0, #6
 8000254:	f000 f9ea 	bl	800062c <GPIO_IRQInterruptConfig>


	return 0;
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	3718      	adds	r7, #24
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40020c00 	.word	0x40020c00
 8000268:	40020000 	.word	0x40020000

0800026c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	delay();
 8000270:	f7ff ffaa 	bl	80001c8 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000274:	2000      	movs	r0, #0
 8000276:	f000 fa5d 	bl	8000734 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800027a:	210c      	movs	r1, #12
 800027c:	4802      	ldr	r0, [pc, #8]	@ (8000288 <EXTI0_IRQHandler+0x1c>)
 800027e:	f000 f9c1 	bl	8000604 <GPIO_ToggleOutputPin>

}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40020c00 	.word	0x40020c00

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	@ (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	@ (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 fa5b 	bl	8000774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ff99 	bl	80001f4 <main>

080002c2 <LoopForever>:

LoopForever:
  b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	080007dc 	.word	0x080007dc
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <GPIO_PeriClockControl>:
 *
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]
	/*
	 * For when GPIO registers are spaced evenly (faster)
	 */
	uint8_t port = ((uint32_t) pGPIOx - GPIOA_BASEADDR) / 0x400;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 80002f2:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80002f6:	0a9b      	lsrs	r3, r3, #10
 80002f8:	73fb      	strb	r3, [r7, #15]
	if (EnOrDi == ENABLE) {
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d10a      	bne.n	8000316 <GPIO_PeriClockControl+0x36>
		RCC->AHB1ENR |= (1 << port);
 8000300:	4b0d      	ldr	r3, [pc, #52]	@ (8000338 <GPIO_PeriClockControl+0x58>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	7bfa      	ldrb	r2, [r7, #15]
 8000306:	2101      	movs	r1, #1
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	4611      	mov	r1, r2
 800030e:	4a0a      	ldr	r2, [pc, #40]	@ (8000338 <GPIO_PeriClockControl+0x58>)
 8000310:	430b      	orrs	r3, r1
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
	 GPIOI_PCLK_DI();
	 }
	 }
	 */

}
 8000314:	e00a      	b.n	800032c <GPIO_PeriClockControl+0x4c>
		RCC->AHB1ENR &= ~(1 << port);
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <GPIO_PeriClockControl+0x58>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	7bfa      	ldrb	r2, [r7, #15]
 800031c:	2101      	movs	r1, #1
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	43d2      	mvns	r2, r2
 8000324:	4611      	mov	r1, r2
 8000326:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <GPIO_PeriClockControl+0x58>)
 8000328:	400b      	ands	r3, r1
 800032a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40023800 	.word	0x40023800

0800033c <GPIO_Init>:
 *
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 800033c:	b480      	push	{r7}
 800033e:	b087      	sub	sp, #28
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	uint32_t temp32 = 0;	// temp32 register
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

	// 1. Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {	// Non interrupt mode
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	2b03      	cmp	r3, #3
 800034e:	d820      	bhi.n	8000392 <GPIO_Init+0x56>
		temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	fa02 f303 	lsl.w	r3, r2, r3
		temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000360:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	681a      	ldr	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	791b      	ldrb	r3, [r3, #4]
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	2103      	movs	r1, #3
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000374:	43db      	mvns	r3, r3
 8000376:	4619      	mov	r1, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	400a      	ands	r2, r1
 800037e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp32; //setting
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	6819      	ldr	r1, [r3, #0]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	697a      	ldr	r2, [r7, #20]
 800038c:	430a      	orrs	r2, r1
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	e099      	b.n	80004c6 <GPIO_Init+0x18a>

	} else {	// Interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	795b      	ldrb	r3, [r3, #5]
 8000396:	2b04      	cmp	r3, #4
 8000398:	d117      	bne.n	80003ca <GPIO_Init+0x8e>
			// 1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800039a:	4b97      	ldr	r3, [pc, #604]	@ (80005f8 <GPIO_Init+0x2bc>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	7912      	ldrb	r2, [r2, #4]
 80003a2:	4611      	mov	r1, r2
 80003a4:	2201      	movs	r2, #1
 80003a6:	408a      	lsls	r2, r1
 80003a8:	4611      	mov	r1, r2
 80003aa:	4a93      	ldr	r2, [pc, #588]	@ (80005f8 <GPIO_Init+0x2bc>)
 80003ac:	430b      	orrs	r3, r1
 80003ae:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear the corresponding RTSR bit
 80003b0:	4b91      	ldr	r3, [pc, #580]	@ (80005f8 <GPIO_Init+0x2bc>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	7912      	ldrb	r2, [r2, #4]
 80003b8:	4611      	mov	r1, r2
 80003ba:	2201      	movs	r2, #1
 80003bc:	408a      	lsls	r2, r1
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a8d      	ldr	r2, [pc, #564]	@ (80005f8 <GPIO_Init+0x2bc>)
 80003c4:	400b      	ands	r3, r1
 80003c6:	6093      	str	r3, [r2, #8]
 80003c8:	e035      	b.n	8000436 <GPIO_Init+0xfa>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	d117      	bne.n	8000402 <GPIO_Init+0xc6>
			// 1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d2:	4b89      	ldr	r3, [pc, #548]	@ (80005f8 <GPIO_Init+0x2bc>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7912      	ldrb	r2, [r2, #4]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a85      	ldr	r2, [pc, #532]	@ (80005f8 <GPIO_Init+0x2bc>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear the corresponding FTSR bit
 80003e8:	4b83      	ldr	r3, [pc, #524]	@ (80005f8 <GPIO_Init+0x2bc>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	7912      	ldrb	r2, [r2, #4]
 80003f0:	4611      	mov	r1, r2
 80003f2:	2201      	movs	r2, #1
 80003f4:	408a      	lsls	r2, r1
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a7f      	ldr	r2, [pc, #508]	@ (80005f8 <GPIO_Init+0x2bc>)
 80003fc:	400b      	ands	r3, r1
 80003fe:	60d3      	str	r3, [r2, #12]
 8000400:	e019      	b.n	8000436 <GPIO_Init+0xfa>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	795b      	ldrb	r3, [r3, #5]
 8000406:	2b06      	cmp	r3, #6
 8000408:	d115      	bne.n	8000436 <GPIO_Init+0xfa>
			// 1. Configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040a:	4b7b      	ldr	r3, [pc, #492]	@ (80005f8 <GPIO_Init+0x2bc>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	4611      	mov	r1, r2
 800041a:	4a77      	ldr	r2, [pc, #476]	@ (80005f8 <GPIO_Init+0x2bc>)
 800041c:	430b      	orrs	r3, r1
 800041e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000420:	4b75      	ldr	r3, [pc, #468]	@ (80005f8 <GPIO_Init+0x2bc>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a71      	ldr	r2, [pc, #452]	@ (80005f8 <GPIO_Init+0x2bc>)
 8000432:	430b      	orrs	r3, r1
 8000434:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		/*get port if GPIO registers are spaced evenly*/
		uint8_t port = ((uint32_t) pGPIOHandle->pGPIOx - GPIOA_BASEADDR) / 0x400;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 800043e:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8000442:	0a9b      	lsrs	r3, r3, #10
 8000444:	74fb      	strb	r3, [r7, #19]

		/*get port if GPIO registers are not spaced evenly*/
		//uint8_t port = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);

		uint8_t extiRegister = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	089b      	lsrs	r3, r3, #2
 800044c:	74bb      	strb	r3, [r7, #18]
		uint8_t pinOffset = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) *4;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	f003 0303 	and.w	r3, r3, #3
 8000456:	b2db      	uxtb	r3, r3
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	747b      	strb	r3, [r7, #17]

		temp32 = (port & 0xF) << pinOffset;		//Note: the port bits are limited in length for security
 800045c:	7cfb      	ldrb	r3, [r7, #19]
 800045e:	f003 020f 	and.w	r2, r3, #15
 8000462:	7c7b      	ldrb	r3, [r7, #17]
 8000464:	fa02 f303 	lsl.w	r3, r2, r3
 8000468:	617b      	str	r3, [r7, #20]
		SYSCFG_PCLK_EN();	// Enable sysconfig
 800046a:	4b64      	ldr	r3, [pc, #400]	@ (80005fc <GPIO_Init+0x2c0>)
 800046c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800046e:	4a63      	ldr	r2, [pc, #396]	@ (80005fc <GPIO_Init+0x2c0>)
 8000470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000474:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[extiRegister] &= ~(0xF << pinOffset);	// clearing
 8000476:	4a62      	ldr	r2, [pc, #392]	@ (8000600 <GPIO_Init+0x2c4>)
 8000478:	7cbb      	ldrb	r3, [r7, #18]
 800047a:	3302      	adds	r3, #2
 800047c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000480:	7c7b      	ldrb	r3, [r7, #17]
 8000482:	210f      	movs	r1, #15
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	495c      	ldr	r1, [pc, #368]	@ (8000600 <GPIO_Init+0x2c4>)
 800048e:	7cbb      	ldrb	r3, [r7, #18]
 8000490:	4002      	ands	r2, r0
 8000492:	3302      	adds	r3, #2
 8000494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[extiRegister] |= temp32;	// Setting
 8000498:	4a59      	ldr	r2, [pc, #356]	@ (8000600 <GPIO_Init+0x2c4>)
 800049a:	7cbb      	ldrb	r3, [r7, #18]
 800049c:	3302      	adds	r3, #2
 800049e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80004a2:	4857      	ldr	r0, [pc, #348]	@ (8000600 <GPIO_Init+0x2c4>)
 80004a4:	7cbb      	ldrb	r3, [r7, #18]
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	3302      	adds	r3, #2
 80004ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b0:	4b51      	ldr	r3, [pc, #324]	@ (80005f8 <GPIO_Init+0x2bc>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	7912      	ldrb	r2, [r2, #4]
 80004b8:	4611      	mov	r1, r2
 80004ba:	2201      	movs	r2, #1
 80004bc:	408a      	lsls	r2, r1
 80004be:	4611      	mov	r1, r2
 80004c0:	4a4d      	ldr	r2, [pc, #308]	@ (80005f8 <GPIO_Init+0x2bc>)
 80004c2:	430b      	orrs	r3, r1
 80004c4:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure the speed
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	799b      	ldrb	r3, [r3, #6]
 80004ca:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	fa02 f303 	lsl.w	r3, r2, r3
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80004d6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	689a      	ldr	r2, [r3, #8]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	2103      	movs	r1, #3
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	400a      	ands	r2, r1
 80004f4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp32; //setting
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	6899      	ldr	r1, [r3, #8]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	430a      	orrs	r2, r1
 8000504:	609a      	str	r2, [r3, #8]

	// 3. Configure the pullup/pulldown settings
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	79db      	ldrb	r3, [r3, #7]
 800050a:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000516:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	2103      	movs	r1, #3
 8000526:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 800052a:	43db      	mvns	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	400a      	ands	r2, r1
 8000534:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp32; //setting
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	68d9      	ldr	r1, [r3, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	430a      	orrs	r2, r1
 8000544:	60da      	str	r2, [r3, #12]

	// 4. Configure the output type
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7a1b      	ldrb	r3, [r3, #8]
 800054a:	461a      	mov	r2, r3
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
	temp32 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000554:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	685a      	ldr	r2, [r3, #4]
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	2301      	movs	r3, #1
 8000564:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	400a      	ands	r2, r1
 8000570:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp32; //setting
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6859      	ldr	r1, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	430a      	orrs	r2, r1
 8000580:	605a      	str	r2, [r3, #4]

	// 5. Configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	795b      	ldrb	r3, [r3, #5]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d131      	bne.n	80005ee <GPIO_Init+0x2b2>
		uint8_t temp1, temp2;

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) / 8;	//high or low
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	795b      	ldrb	r3, [r3, #5]
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	743b      	strb	r3, [r7, #16]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) % 8;	//register pin offset
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0b1111 << (4 * temp2));// clearing
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	7c3a      	ldrb	r2, [r7, #16]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	220f      	movs	r2, #15
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	43db      	mvns	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	7c3a      	ldrb	r2, [r7, #16]
 80005bc:	4001      	ands	r1, r0
 80005be:	3208      	adds	r2, #8
 80005c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFRL[temp1] |=
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	7c3a      	ldrb	r2, [r7, #16]
 80005ca:	3208      	adds	r2, #8
 80005cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode) << (4 * temp2));//setting
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7a5b      	ldrb	r3, [r3, #9]
 80005d4:	461a      	mov	r2, r3
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFRL[temp1] |=
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	7c3a      	ldrb	r2, [r7, #16]
 80005e6:	4301      	orrs	r1, r0
 80005e8:	3208      	adds	r2, #8
 80005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80005ee:	bf00      	nop
 80005f0:	371c      	adds	r7, #28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	40013c00 	.word	0x40013c00
 80005fc:	40023800 	.word	0x40023800
 8000600:	40013800 	.word	0x40013800

08000604 <GPIO_ToggleOutputPin>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	78fa      	ldrb	r2, [r7, #3]
 8000616:	2101      	movs	r1, #1
 8000618:	fa01 f202 	lsl.w	r2, r1, r2
 800061c:	405a      	eors	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	615a      	str	r2, [r3, #20]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <GPIO_IRQInterruptConfig>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	71bb      	strb	r3, [r7, #6]
	/*
	 * Smart option knowing all NVIC registers are evenly spaced and next to each other
	 */
	if (IRQNumber > 81) return; // Protection (max 81 IRQ numbers)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b51      	cmp	r3, #81	@ 0x51
 8000640:	d82f      	bhi.n	80006a2 <GPIO_IRQInterruptConfig+0x76>

	uint8_t NVIC_reg_idx = IRQNumber / 32;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	095b      	lsrs	r3, r3, #5
 8000646:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_pos    = IRQNumber % 32;
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	73bb      	strb	r3, [r7, #14]

	if (EnOrDi == ENABLE) {
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d114      	bne.n	8000680 <GPIO_IRQInterruptConfig+0x54>
		*(NVIC_ISER0 + NVIC_reg_idx) |= (1 << bit_pos);
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800065e:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	2101      	movs	r1, #1
 8000668:	fa01 f303 	lsl.w	r3, r1, r3
 800066c:	4619      	mov	r1, r3
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000676:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800067a:	430a      	orrs	r2, r1
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	e011      	b.n	80006a4 <GPIO_IRQInterruptConfig+0x78>
	} else {
		*(NVIC_ICER0 + NVIC_reg_idx) |= (1 << bit_pos);
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	009a      	lsls	r2, r3, #2
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <GPIO_IRQInterruptConfig+0x80>)
 8000686:	4413      	add	r3, r2
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	2101      	movs	r1, #1
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	4618      	mov	r0, r3
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	0099      	lsls	r1, r3, #2
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <GPIO_IRQInterruptConfig+0x80>)
 800069a:	440b      	add	r3, r1
 800069c:	4302      	orrs	r2, r0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e000      	b.n	80006a4 <GPIO_IRQInterruptConfig+0x78>
	if (IRQNumber > 81) return; // Protection (max 81 IRQ numbers)
 80006a2:	bf00      	nop
	            break;
	    }
	} else {
	    //Repeat for ICER
	}*/
}
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	e000e180 	.word	0xe000e180

080006b0 <GPIO_IRQPriorityConfig>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority) {
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber / 4;	//Find IPR register
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	089b      	lsrs	r3, r3, #2
 80006c4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;	//Find IPR register section
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	73bb      	strb	r3, [r7, #14]

	/*
	 * Register priority value fields are eight bits wide, and non-implemented low-order bits read as zero and ignore writes.
	 */
	uint8_t shift_amount = iprx_section*8 + (8 - NO_PR_BITS_IMPLEMENTED);
 80006ce:	7bbb      	ldrb	r3, [r7, #14]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	3304      	adds	r3, #4
 80006d6:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) &= ~(0xF << shift_amount);		//Clear XXX: Maybe have to change if @NO_PR_BITS_IMPLEMENTED changes
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80006e0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	210f      	movs	r1, #15
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80006fa:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80006fe:	400a      	ands	r2, r1
 8000700:	601a      	str	r2, [r3, #0]
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQNumber << shift_amount);	//Set
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800070a:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	79f9      	ldrb	r1, [r7, #7]
 8000712:	7b7b      	ldrb	r3, [r7, #13]
 8000714:	fa01 f303 	lsl.w	r3, r1, r3
 8000718:	4619      	mov	r1, r3
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000722:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000726:	430a      	orrs	r2, r1
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <GPIO_IRQHandling>:
 *
 * @return 			-
 *
 * @Note			- none
 */
void GPIO_IRQHandling(uint8_t PinNumber) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	//Clear the exti pr register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber)) {
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <GPIO_IRQHandling+0x3c>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	79fa      	ldrb	r2, [r7, #7]
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	4013      	ands	r3, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	d009      	beq.n	8000764 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber);
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <GPIO_IRQHandling+0x3c>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	2101      	movs	r1, #1
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	4611      	mov	r1, r2
 800075e:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <GPIO_IRQHandling+0x3c>)
 8000760:	430b      	orrs	r3, r1
 8000762:	6153      	str	r3, [r2, #20]
	}
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40013c00 	.word	0x40013c00

08000774 <__libc_init_array>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4d0d      	ldr	r5, [pc, #52]	@ (80007ac <__libc_init_array+0x38>)
 8000778:	4c0d      	ldr	r4, [pc, #52]	@ (80007b0 <__libc_init_array+0x3c>)
 800077a:	1b64      	subs	r4, r4, r5
 800077c:	10a4      	asrs	r4, r4, #2
 800077e:	2600      	movs	r6, #0
 8000780:	42a6      	cmp	r6, r4
 8000782:	d109      	bne.n	8000798 <__libc_init_array+0x24>
 8000784:	4d0b      	ldr	r5, [pc, #44]	@ (80007b4 <__libc_init_array+0x40>)
 8000786:	4c0c      	ldr	r4, [pc, #48]	@ (80007b8 <__libc_init_array+0x44>)
 8000788:	f000 f818 	bl	80007bc <_init>
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	10a4      	asrs	r4, r4, #2
 8000790:	2600      	movs	r6, #0
 8000792:	42a6      	cmp	r6, r4
 8000794:	d105      	bne.n	80007a2 <__libc_init_array+0x2e>
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	f855 3b04 	ldr.w	r3, [r5], #4
 800079c:	4798      	blx	r3
 800079e:	3601      	adds	r6, #1
 80007a0:	e7ee      	b.n	8000780 <__libc_init_array+0xc>
 80007a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a6:	4798      	blx	r3
 80007a8:	3601      	adds	r6, #1
 80007aa:	e7f2      	b.n	8000792 <__libc_init_array+0x1e>
 80007ac:	080007d4 	.word	0x080007d4
 80007b0:	080007d4 	.word	0x080007d4
 80007b4:	080007d4 	.word	0x080007d4
 80007b8:	080007d8 	.word	0x080007d8

080007bc <_init>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	bf00      	nop
 80007c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c2:	bc08      	pop	{r3}
 80007c4:	469e      	mov	lr, r3
 80007c6:	4770      	bx	lr

080007c8 <_fini>:
 80007c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ca:	bf00      	nop
 80007cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ce:	bc08      	pop	{r3}
 80007d0:	469e      	mov	lr, r3
 80007d2:	4770      	bx	lr
